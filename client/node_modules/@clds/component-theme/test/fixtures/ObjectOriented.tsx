import styled from 'styled-components';

import { theme } from './testTheme';
import { combineValues } from '../../src/api/combineValues';
import { createVariant } from '../../src/api/createVariant';
import { globalTheme } from '../../src/api/globalTheme';

export const ObjectOrientedSolutionGlobalMixins = styled.div`
  --test1: ${globalTheme.palette.primary};
  --test2: ${globalTheme.palette.primary};
  --test3: ${globalTheme.palette.primary};
  --test4: ${globalTheme.palette.primary};
  --test5: ${globalTheme.palette.primary};
`;
export const ObjectOrientedSolutionComponentMixins = styled.div`
  --test1: ${theme.pill.primary.background.color};
  --test2: ${theme.pill.primary.background.color};
  --test3: ${theme.pill.primary.background.color};
  --test4: ${theme.pill.primary.background.color};
  --test5: ${theme.pill.primary.background.color};
`;

export const ObjectOrientedSolutionCombineValues = styled.div`
  --test1: ${combineValues(
    globalTheme.palette.primary,
    globalTheme.palette.secondary,
    (c1, c2) => c1 + c2,
  )};
  --test2: ${combineValues(
    globalTheme.palette.primary,
    globalTheme.palette.secondary,
    (c1, c2) => c1 + c2,
  )};
  --test3: ${combineValues(
    globalTheme.palette.primary,
    globalTheme.palette.secondary,
    (c1, c2) => c1 + c2,
  )};
  --test4: ${combineValues(
    globalTheme.palette.primary,
    globalTheme.palette.secondary,
    (c1, c2) => c1 + c2,
  )};
  --test5: ${combineValues(
    globalTheme.palette.primary,
    globalTheme.palette.secondary,
    (c1, c2) => c1 + c2,
  )};
`;

export interface TestProps {
  type: 'primary' | 'secondary';
  shape: 'solid' | 'pill';
}
const variant = createVariant(
  (props: TestProps) => theme[props.shape][props.type],
);
const backgroundMixin = variant((v) => v.background.color);

export const ObjectOrientedSolutionVariants = styled.div`
  --test1: ${backgroundMixin};
  --test2: ${backgroundMixin};
  --test3: ${backgroundMixin};
  --test4: ${backgroundMixin};
  --test5: ${backgroundMixin};
`;
