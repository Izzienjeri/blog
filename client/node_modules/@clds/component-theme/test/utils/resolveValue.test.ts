import { assert } from 'chai';

import { themeNotFoundMessage } from '../../src/api/themeNotFoundMessage';
import { MixinProps, ThemeWithOverrides } from '../../src/types';
import { resolveValue } from '../../src/utils/resolveValue';

describe('resolveValue', () => {
  // eslint-disable-next-line mocha/no-setup-in-describe
  const id = Symbol();
  const stringId = 'my-component';
  const theme = {
    palette: {
      primary: 'primary',
      secondary: 'secondary',
    },
  };

  const primitiveString = 'foo';
  const primitiveString2 = 'bar';
  const primitiveNumber = 123;
  const primitiveNumber2 = 456;
  const primitivePathReference = 'palette.primary';
  const primitivePathReference2 = 'palette.secondary';
  const mixin = (
    props: MixinProps<
      Record<string, unknown>,
      typeof theme & ThemeWithOverrides
    >,
  ) => props.theme.palette.primary;
  const mixin2 = (
    props: MixinProps<
      Record<string, unknown>,
      typeof theme & ThemeWithOverrides
    >,
  ) => props.theme.palette.secondary;

  const tests = [
    [primitiveString, undefined, 'foo'],
    [primitiveString, primitiveString2, 'bar'],
    [primitiveString, primitiveNumber2, 456],
    [primitiveString, primitivePathReference2, 'secondary'],
    [primitiveString, mixin2, 'secondary'],
    [primitiveNumber, undefined, 123],
    [primitiveNumber, primitiveString2, 'bar'],
    [primitiveNumber, primitiveNumber2, 456],
    [primitiveNumber, primitivePathReference2, 'secondary'],
    [primitiveNumber, mixin2, 'secondary'],
    [primitivePathReference, undefined, 'primary'],
    [primitivePathReference, primitiveString2, 'bar'],
    [primitivePathReference, primitiveNumber2, 456],
    [primitivePathReference, primitivePathReference2, 'secondary'],
    [primitivePathReference, mixin2, 'secondary'],
    [mixin, undefined, 'primary'],
    [mixin, primitiveString2, 'bar'],
    [mixin, primitiveNumber2, 456],
    [mixin, primitivePathReference2, 'secondary'],
    [mixin, mixin2, 'secondary'],
  ] as const;

  for (const [value, override, expected] of tests) {
    // eslint-disable-next-line mocha/no-setup-in-describe
    const parsedValue = value.toString();
    const parserOverride =
      // eslint-disable-next-line mocha/no-setup-in-describe
      override === undefined ? 'undefined' : override.toString();

    it(`with value=${parsedValue}, override=${parserOverride} should resolve to ${expected}`, () => {
      assert.strictEqual(
        resolveValue(id, value, 'foo.bar', {
          theme: {
            ...theme,
            ...(override && {
              components: { [id]: { foo: { bar: override } } },
            }),
          },
        }),
        expected,
      );
      assert.strictEqual(
        resolveValue(stringId, value, 'foo.bar', {
          theme: {
            ...theme,
            ...(override && {
              components: { [stringId]: { foo: { bar: override } } },
            }),
          },
        }),
        expected,
      );
    });
  }

  it('should throw an error when theme is not defined', () => {
    assert.throws(
      () => resolveValue(Symbol(), 'mock-leaf', 'mock-path', {}),
      themeNotFoundMessage,
    );
  });
});
