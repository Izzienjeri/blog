import { assert } from 'chai';
import { get } from 'lodash';

import { mapTree } from '../../src/tree/mapTree';
import { NodeMapper, StyledMixin } from '../../src/tree/mapTree.types';

const data = {
  radius: 'radius.lg',
  height: 30,
  variant: {
    normal: {
      color: 'palette.contrastLow',
      border: {
        weight: '1px',
        color: 'palette.contrastHigh',
      },
    },
    danger: {
      color: 'palette.error',
      border: {
        weight: '3px',
        color: 'palette.contrastHigh',
      },
    },
  },
};
describe('mapLeaves', () => {
  /**
   * Knowing full path is needed to build a tool that will also look for an override in theme,
   * so it has to know if there is:
   * theme[theme symbol id][current path]
   * inside a theme context
   */
  it('can map leaves to full paths', () => {
    const api = mapTree(data, (leaf, currentPath) => currentPath);

    assert.deepStrictEqual(
      api,
      JSON.parse(`
      {
        "height": "height",
        "radius": "radius",
        "variant": {
          "danger": {
            "border": {
              "color": "variant.danger.border.color",
              "weight": "variant.danger.border.weight"
            },
            "color": "variant.danger.color"
          },
          "normal": {
            "border": {
              "color": "variant.normal.border.color",
              "weight": "variant.normal.border.weight"
            },
            "color": "variant.normal.color"
          }
        }
      }
    `),
    );
  });
  it('can map leaves to mixins that use theme object', () => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mapper: NodeMapper<StyledMixin<any>> = (leaf) => (props) =>
      get(props.theme, leaf as string, leaf);

    const api = mapTree(data, mapper);

    assert.strictEqual(
      api.variant.danger.border.color({
        theme: { palette: { contrastHigh: 'it works' } },
      }),
      'it works',
    );
  });
  it('can map leaves to mixins that use theme object and look for overrides', () => {
    const id = Symbol();

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mapper: NodeMapper<StyledMixin<any>> =
      (leaf, currentPath) => (props) => {
        const override = props.theme[id] && get(props.theme[id], currentPath);

        if (override !== undefined) {
          return override;
        }
        return get(props.theme, leaf as string, leaf);
      };

    const api = mapTree(data, mapper);

    const theme = {
      palette: {
        contrastHigh: 'contrastHighValue',
        contrastLow: 'contrastLowValue',
        error: 'errorValue',
      },
      [id]: { variant: { danger: { border: { color: 'overridden' } } } },
    };
    assert.strictEqual(
      api.variant.normal.border.color({ theme }),
      'contrastHighValue',
    );
    assert.strictEqual(api.variant.normal.border.weight({ theme }), '1px');
    assert.strictEqual(
      api.variant.danger.border.color({ theme }),
      'overridden',
    );
    assert.strictEqual(api.variant.danger.border.weight({ theme }), '3px');
    assert.strictEqual(api.height({ theme }), 30 as unknown);
  });
});
