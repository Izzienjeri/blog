/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-explicit-any */
import React, { cloneElement, ReactElement } from 'react';
import { create } from 'react-test-renderer';
import { ThemeProvider } from 'styled-components';

// eslint-disable-next-line @nx/enforce-module-boundaries
import { generateTheme } from '@clds/theme-helper';
// eslint-disable-next-line @nx/enforce-module-boundaries
import defaultTheme, { dark } from '@clds/themes';

import {
  ObjectOrientedSolutionCombineValues,
  ObjectOrientedSolutionComponentMixins,
  ObjectOrientedSolutionGlobalMixins,
  ObjectOrientedSolutionVariants,
} from './fixtures/ObjectOriented';
import { themeDefinition } from './fixtures/testTheme';

const caseRepetition = 1000;
const theme = generateTheme(
  defaultTheme as any,
  { components: { 'test-component': themeDefinition } } as any,
);
const darkTheme = generateTheme(
  dark as any,
  { components: { 'test-component': themeDefinition } } as any,
);
const measureRender = (element: ReactElement) => {
  const children = [];
  for (let i = 0; i < caseRepetition; i += 1) {
    children.push(cloneElement(element, { key: i }));
  }

  const t0 = performance.now();
  const root = create(<ThemeProvider theme={theme}>{children}</ThemeProvider>);
  const t1 = performance.now();
  root.update(<ThemeProvider theme={darkTheme}>{children}</ThemeProvider>);
  const t2 = performance.now();

  return `light theme: ${Math.floor(t1 - t0)}, dark theme: ${Math.floor(
    t2 - t1,
  )}`;
};

// eslint-disable-next-line mocha/no-skipped-tests
describe.skip('performance (please unskip to run the test manually)', () => {
  it('global mixins', () => {
    const time = measureRender(<ObjectOrientedSolutionGlobalMixins />);

    console.log(`global mixins: ${time}`);
  });
  it('component mixins', () => {
    const time = measureRender(<ObjectOrientedSolutionComponentMixins />);

    console.log(`component mixins: ${time}`);
  });
  it('combineValues', () => {
    const time = measureRender(<ObjectOrientedSolutionCombineValues />);

    console.log(`combineValues: ${time}`);
  });
  it('variant', () => {
    const time = measureRender(
      <ObjectOrientedSolutionVariants type="primary" shape="pill" />,
    );

    console.log(`variants: ${time}`);
  });
});
