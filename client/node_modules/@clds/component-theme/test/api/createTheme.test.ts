import { assert } from 'chai';

import { createTheme, overrideTheme } from '../../src/api/createTheme';
import { Mixin } from '../../src/api/createTheme.types';
import { MixinProps } from '../../src/types';

describe('createTheme', () => {
  describe('with no override', () => {
    it('properly resolves absolute values in leaves', () => {
      const props: MixinProps<Record<string, unknown>> = { theme: {} };
      const theme = createTheme({
        aNumber: 123,
        aString: 'hello',
        aBoolean: true,
      });
      assert.strictEqual(theme.aNumber(props), 123);
      assert.strictEqual(theme.aString(props), 'hello');
      assert.strictEqual(theme.aBoolean(props), true);
    });
    it('properly resolves absolute values in parents', () => {
      const props: MixinProps<Record<string, unknown>> = { theme: {} };
      const theme = createTheme({
        deep: { aNumber: 123, aString: 'hello', aBoolean: true },
      });
      assert.strictEqual(theme(props).deep.aNumber, 123);
      assert.strictEqual(theme(props).deep.aString, 'hello');
      assert.strictEqual(theme(props).deep.aBoolean, true);
      assert.strictEqual(theme.deep(props).aNumber, 123);
      assert.strictEqual(theme.deep(props).aString, 'hello');
      assert.strictEqual(theme.deep(props).aBoolean, true);
    });
    it('properly resolves leaf-mixin', () => {
      const props: MixinProps<Record<string, unknown>> = { theme: {} };
      const stringMixin: Mixin<string> = () => 'string mixin value';
      const numberMixin: Mixin<number> = () => 999;
      const theme = createTheme({
        deep: {
          aNumber: 123,
          aStringMixin: stringMixin,
          aNumberMixin: numberMixin,
          aBoolean: true,
        },
      });
      assert.strictEqual(theme.deep.aBoolean(props), true);
      assert.strictEqual(theme.deep.aNumber(props), 123);
      assert.strictEqual(theme.deep.aStringMixin(props), 'string mixin value');
      assert.strictEqual(theme.deep.aNumberMixin(props), 999);

      assert.strictEqual(theme.deep(props).aBoolean, true);
      assert.strictEqual(theme.deep(props).aNumber, 123);
      assert.strictEqual(theme.deep(props).aStringMixin, 'string mixin value');
      assert.strictEqual(theme.deep(props).aNumberMixin, 999);

      assert.strictEqual(theme(props).deep.aBoolean, true);
      assert.strictEqual(theme(props).deep.aNumber, 123);
      assert.strictEqual(theme(props).deep.aStringMixin, 'string mixin value');
      assert.strictEqual(theme(props).deep.aNumberMixin, 999);
    });
  });
  describe('with override', () => {
    it('can find override for mixin', () => {
      const stringMixin: Mixin<string> = () => 'string mixin value';
      const numberMixin: Mixin<number> = () => 999;
      const theme = createTheme({
        deep: {
          aNumber: 123,
          aStringMixin: stringMixin,
          aNumberMixin: numberMixin,
          aBoolean: true,
        },
      });
      const props: MixinProps<Record<string, unknown>> = {
        theme: {
          components: {
            ...overrideTheme(theme, {
              deep: {
                aBoolean: false,
                aNumber: 101010,
                aNumberMixin: 987654321,
                aStringMixin: 'abcdef',
              },
            }),
          },
        },
      };
      assert.strictEqual(theme.deep.aBoolean(props), false);
      assert.strictEqual(theme.deep.aNumber(props), 101010);
      assert.strictEqual(theme.deep.aStringMixin(props), 'abcdef');
      assert.strictEqual(theme.deep.aNumberMixin(props), 987654321);

      assert.strictEqual(theme.deep(props).aBoolean, false);
      assert.strictEqual(theme.deep(props).aNumber, 101010);
      assert.strictEqual(theme.deep(props).aStringMixin, 'abcdef');
      assert.strictEqual(theme.deep(props).aNumberMixin, 987654321);

      assert.strictEqual(theme(props).deep.aBoolean, false);
      assert.strictEqual(theme(props).deep.aNumber, 101010);
      assert.strictEqual(theme(props).deep.aStringMixin, 'abcdef');
      assert.strictEqual(theme(props).deep.aNumberMixin, 987654321);
    });
    it('can find override for mixin when override is another mixin', () => {
      const stringMixin: Mixin<string> = () => 'string mixin value';
      const numberMixin: Mixin<number> = () => 999;
      const stringMixinOverride: Mixin<string> = () => 'abcdef';
      const numberMixinOverride: Mixin<number> = () => 987654321;
      const theme = createTheme({
        deep: {
          aNumber: 123,
          aStringMixin: stringMixin,
          aNumberMixin: numberMixin,
          aBoolean: true,
        },
      });
      const props: MixinProps<Record<string, unknown>> = {
        theme: {
          components: {
            ...overrideTheme(theme, {
              deep: {
                aNumberMixin: numberMixinOverride,
                aStringMixin: stringMixinOverride,
              },
            }),
          },
        },
      };
      assert.strictEqual(theme.deep.aBoolean(props), true); // not overridden
      assert.strictEqual(theme.deep.aNumber(props), 123); // not overridden
      assert.strictEqual(theme.deep.aStringMixin(props), 'abcdef');
      assert.strictEqual(theme.deep.aNumberMixin(props), 987654321);

      assert.strictEqual(theme.deep(props).aBoolean, true); // not overridden
      assert.strictEqual(theme.deep(props).aNumber, 123); // not overridden
      assert.strictEqual(theme.deep(props).aStringMixin, 'abcdef');
      assert.strictEqual(theme.deep(props).aNumberMixin, 987654321);

      assert.strictEqual(theme(props).deep.aBoolean, true); // not overridden
      assert.strictEqual(theme(props).deep.aNumber, 123); // not overridden
      assert.strictEqual(theme(props).deep.aStringMixin, 'abcdef');
      assert.strictEqual(theme(props).deep.aNumberMixin, 987654321);
    });
  });
  describe('toString', () => {
    it('produces developer-friendly mixin structure', () => {
      const stringMixin: Mixin<string> = () => 'string mixin value';
      const numberMixin: Mixin<number> = () => 999;
      const theme = createTheme({
        deep: {
          aNumber: 123,
          aString: 'foo',
          aBoolean: true,
          aStringMixin: stringMixin,
          aNumberMixin: numberMixin,
        },
      });

      assert.deepStrictEqual(
        JSON.parse(theme.toString()),
        JSON.parse(`{
  "deep": {
    "aBoolean": true,
    "aNumber": 123,
    "aNumberMixin": "() => 999",
    "aString": "foo",
    "aStringMixin": "() => 'string mixin value'"
  }
}`),
      );
    });
  });
});
