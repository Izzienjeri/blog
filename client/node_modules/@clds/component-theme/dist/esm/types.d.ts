declare type ComponentOverrides = {
    [componentId in ThemeId]: any;
};
export interface ThemeWithOverrides {
    components?: ComponentOverrides;
}
export declare type DeepPartial<T> = T extends Record<string, unknown> ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
export declare type ThemeId = symbol | string;
/**
 * Represents any mixin function that can be consumed in styled component
 */
export declare type MixinFunction = (...args: any) => any;
/**
 * Represents props that are passed to mixin
 */
export declare type MixinProps<PropsType, ThemeType extends ThemeWithOverrides = Record<string, unknown>> = PropsType & {
    theme: ThemeType;
};
/**
 * Represent tree of definition given to createTheme() function
 */
export declare type Leaf = string | number | boolean | MixinFunction;
export declare type Node = Leaf | ParentNode;
export interface ParentNode {
}
export {};
