import { Leaf, Node, ParentNode } from '../types';
export declare type StyledMixin<ThemeType extends Record<string, unknown>, PropsType = Record<string, unknown>, ReturnType = string> = (props: PropsType & {
    theme: ThemeType;
}) => ReturnType;
export declare type MappedNode<N extends Node, M> = N extends Leaf ? MappedLeaf<M> : MappedParentNode<N, M>;
export declare type NodeMapper<M> = (leaf: Node, currentPath: string) => M;
declare type MappedLeaf<M> = M;
declare type MappedParentNode<N extends Node, M> = {
    [K in keyof N]: N[K] extends Leaf ? MappedLeaf<M> : N[K] extends ParentNode ? MappedParentNode<N[K], M> : never;
};
export {};
