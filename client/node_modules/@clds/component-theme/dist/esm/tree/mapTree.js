import { isParent } from '../utils/isParent';
export const mapTree = (node, mapper, currentPath, mapParents = false, nodeFactory = () => undefined) => {
    const nodeIsParent = isParent(node);
    const nodeIsLeaf = !nodeIsParent;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const mappedNode = mapParents || nodeIsLeaf ? mapper(node, currentPath || '') : {};
    Object.assign(mappedNode, nodeFactory(currentPath || ''));
    if (nodeIsParent) {
        for (const key in node) {
            // istanbul ignore else
            if (Object.prototype.hasOwnProperty.call(node, key)) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                mappedNode[key] = mapTree(node[key], mapper, currentPath ? currentPath + '.' + key : key, mapParents, nodeFactory);
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return mappedNode;
};
//# sourceMappingURL=mapTree.js.map