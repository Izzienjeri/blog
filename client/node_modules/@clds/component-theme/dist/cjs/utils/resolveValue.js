"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveValue = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const lodash_1 = require("lodash");
const globalThemeId_1 = require("./globalThemeId");
const themeNotFoundMessage_1 = require("../api/themeNotFoundMessage");
const findOverride = (props, id, path) => {
    var _a;
    if (id === globalThemeId_1.globalThemeId) {
        // global mixins are overridden at theme root
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
        return (0, lodash_1.get)(props.theme, path);
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (!props.theme) {
        throw new Error(themeNotFoundMessage_1.themeNotFoundMessage);
    }
    // global mixins are overridden at theme.components.*
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    return ((_a = props.theme.components) === null || _a === void 0 ? void 0 : _a[id]) && (0, lodash_1.get)(props.theme.components[id], path);
};
/**
 * For component of given ID and given theme definition leaf node, resolve the final css value.
 * @param id theme internal id, needed to find an override in theme context
 * @param leaf leaf node of theme definition three. It can be a primitive value or other mixin
 * (ex. mixins.palette.primary) or string reference (ex. 'palette.primary')
 * @param path path of node relative to theme definition root (ex. pill.primary.button.background.color)
 * @param props value of properties from a styled component, including theme tree value
 */
const resolveValue = (id, leaf, path, props) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const override = findOverride(props, id, path);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const reference = override !== null && override !== void 0 ? override : leaf;
    if (typeof reference === 'function') {
        // reference to other mixin, just call it
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return
        return reference(props);
    }
    // primitive value or old-school string path reference to global theme
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    return (0, lodash_1.get)(props.theme, reference, reference); // we still support string based mixins, we need to try to lookup them
};
exports.resolveValue = resolveValue;
//# sourceMappingURL=resolveValue.js.map