"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideTheme = exports.createTheme = exports.idField = void 0;
/* eslint-disable @typescript-eslint/no-unsafe-return,
   @typescript-eslint/no-unsafe-call,
   @typescript-eslint/no-unsafe-member-access,
   no-unused-vars
*/
const lodash_1 = require("lodash");
const themeNotFoundMessage_1 = require("./themeNotFoundMessage");
const mapTree_1 = require("../tree/mapTree");
const resolveValue_1 = require("../utils/resolveValue");
exports.idField = Symbol();
const createThemePrecompile = (id, node) => {
    const cache = new WeakMap();
    const compileTheme = (theme) => (0, mapTree_1.mapTree)(node, (node, leafPath) => (0, resolveValue_1.resolveValue)(id, node, leafPath, { theme }));
    return {
        getCompiledTheme: (theme) => {
            if (cache.has(theme)) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return cache.get(theme);
            }
            const compiledTheme = compileTheme(theme);
            cache.set(theme, compiledTheme);
            return compiledTheme;
        },
    };
};
const createTheme = (definition, id = Symbol('unique id of component theme')) => {
    const precompiledThemes = createThemePrecompile(id, definition);
    const createMixinForNode = (node, currentPath) => (props) => {
        if (props.theme === undefined) {
            throw new Error(themeNotFoundMessage_1.themeNotFoundMessage);
        }
        const compiledTheme = precompiledThemes.getCompiledTheme(props.theme);
        return currentPath === ''
            ? compiledTheme
            : (0, lodash_1.get)(compiledTheme, currentPath);
    };
    const mixinTree = (0, mapTree_1.mapTree)(definition, createMixinForNode, undefined, true, (currentPath) => ({
        toString: () => `mixins.${currentPath}`,
    }));
    mixinTree[exports.idField] = id;
    mixinTree.toString = () => JSON.stringify(definition, (key, value) => (typeof value === 'function' ? value.toString() : value), ' ');
    return mixinTree;
};
exports.createTheme = createTheme;
const overrideTheme = (theme, override) => ({
    [theme[exports.idField]]: override,
});
exports.overrideTheme = overrideTheme;
//# sourceMappingURL=createTheme.js.map