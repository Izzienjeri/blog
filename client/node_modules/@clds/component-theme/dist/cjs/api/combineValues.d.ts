declare type ExtractReturnedValues<List extends Array<(...args: any) => any>> = List extends [(...args: any) => infer Result, ...infer RemainingItems] ? RemainingItems extends Array<(...args: any) => any> ? [Result, ...ExtractReturnedValues<RemainingItems>] : [Result] : [];
export declare function combineValues<Props, Functions extends Array<((props: Props) => any) | ((...args: any) => any)>, Resolver extends (...args: [...ExtractReturnedValues<Functions>, Props]) => any>(...args: [...Functions, Resolver]): (props: Props) => ReturnType<Resolver>;
export {};
