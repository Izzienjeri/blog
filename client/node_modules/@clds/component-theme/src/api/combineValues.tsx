/* eslint-disable @typescript-eslint/no-explicit-any */
type ExtractReturnedValues<List extends Array<(...args: any) => any>> =
  List extends [(...args: any) => infer Result, ...infer RemainingItems]
    ? RemainingItems extends Array<(...args: any) => any>
      ? [Result, ...ExtractReturnedValues<RemainingItems>]
      : [Result]
    : [];

export function combineValues<
  Props,
  Functions extends Array<((props: Props) => any) | ((...args: any) => any)>,
  Resolver extends (
    ...args: [...ExtractReturnedValues<Functions>, Props]
  ) => any,
>(...args: [...Functions, Resolver]): (props: Props) => ReturnType<Resolver> {
  const functions = args.slice(0, -1) as Functions;
  const compute = args[args.length - 1] as Resolver;
  return (props: Props) => {
    const values = functions.map((value) =>
      value(props),
    ) as ExtractReturnedValues<Functions>;
    return compute(...values, props);
  };
}
