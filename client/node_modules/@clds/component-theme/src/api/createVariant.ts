/**
 * Utility similar to combineValues but it produces shorter syntax to compute style based on particular branch of theme,
 * based on props
 * const variant = const variant = createVariant((props: Props) => theme[props.shape][props.type]);
 * // then use in styled-components:
 * border-radius: ${variant(t => t.background)};
 *
 * Later we will add a compileVariant that will replace it with createVariant and also replace all
 * variant.foo.bar.baz with variant(t=>t.foo.bar.baz)
 *
 * @param resolver
 */
import { MixinFunction } from '../types';

export const createVariant = <ResolverType extends MixinFunction>(
  resolver: ResolverType,
) => {
  type Props = Parameters<ResolverType>[0];
  type Calculator<RetType, Props> = (
    value: ReturnType<ReturnType<ResolverType>>,
    props: Props,
  ) => RetType;

  return <R>(calculator?: Calculator<R, Props>) =>
    (props: Props) => {
      const resolvedBranch = resolver(props)(props);
      return calculator ? calculator(resolvedBranch, props) : resolvedBranch;
    };
};
