/* eslint-disable @typescript-eslint/no-unsafe-return,
   @typescript-eslint/no-unsafe-call,
   @typescript-eslint/no-unsafe-member-access,
   no-unused-vars
*/
import { get } from 'lodash';

import defaultTheme from '@clds/themes';

import {
  MappedNode,
  MixinToReturnValue,
  NodeToMixinMapper,
  Override,
} from './createTheme.types';
import { themeNotFoundMessage } from './themeNotFoundMessage';
import { mapTree } from '../tree/mapTree';
import { Leaf, Node, ThemeId, ThemeWithOverrides } from '../types';
import { resolveValue } from '../utils/resolveValue';

export const idField = Symbol();

type InternalThemeApi = {
  [id in typeof idField]: ThemeId;
};

const createThemePrecompile = <NodeType extends Node>(
  id: ThemeId,
  node: NodeType,
) => {
  type ThemeType = ThemeWithOverrides;
  const cache = new WeakMap<ThemeWithOverrides, MixinToReturnValue<NodeType>>();

  const compileTheme = (theme: ThemeType) =>
    mapTree(node, (node, leafPath) =>
      resolveValue(id, node as Leaf, leafPath, { theme }),
    );

  return {
    getCompiledTheme: (theme: ThemeType) => {
      if (cache.has(theme)) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return cache.get(theme)!;
      }
      const compiledTheme = compileTheme(theme);
      cache.set(
        theme,
        compiledTheme as unknown as MixinToReturnValue<NodeType>,
      );
      return compiledTheme;
    },
  };
};

export const createTheme = <T extends Node, D = typeof defaultTheme>(
  definition: T,
  id: ThemeId = Symbol('unique id of component theme'),
): MappedNode<T> & InternalThemeApi => {
  const precompiledThemes = createThemePrecompile(id, definition);

  const createMixinForNode: NodeToMixinMapper =
    (node, currentPath) => (props) => {
      if (props.theme === undefined) {
        throw new Error(themeNotFoundMessage);
      }
      const compiledTheme = precompiledThemes.getCompiledTheme(props.theme);

      return currentPath === ''
        ? compiledTheme
        : get(compiledTheme, currentPath);
    };

  const mixinTree = mapTree(
    definition,
    createMixinForNode,
    undefined,
    true,
    (currentPath) => ({
      toString: () => `mixins.${currentPath}`,
    }),
  ) as MappedNode<T> & InternalThemeApi;

  mixinTree[idField] = id;
  mixinTree.toString = () =>
    JSON.stringify(
      definition,
      (key, value) => (typeof value === 'function' ? value.toString() : value),
      ' ',
    );

  return mixinTree;
};

export const overrideTheme = <T extends Node>(
  theme: MappedNode<T>,
  override: Override<T>,
) => ({
  [(theme as unknown as InternalThemeApi)[idField]]: override,
});
