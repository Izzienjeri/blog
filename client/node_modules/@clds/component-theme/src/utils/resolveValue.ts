/* eslint-disable @typescript-eslint/no-explicit-any */
import { get } from 'lodash';

import { globalThemeId } from './globalThemeId';
import { themeNotFoundMessage } from '../api/themeNotFoundMessage';
import { Leaf, MixinProps, ThemeId } from '../types';

const findOverride = (props: MixinProps<any>, id: ThemeId, path: string) => {
  if (id === globalThemeId) {
    // global mixins are overridden at theme root
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    return get(props.theme, path);
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  if (!props.theme) {
    throw new Error(themeNotFoundMessage);
  }

  // global mixins are overridden at theme.components.*
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
  return props.theme.components?.[id] && get(props.theme.components[id], path);
};

/**
 * For component of given ID and given theme definition leaf node, resolve the final css value.
 * @param id theme internal id, needed to find an override in theme context
 * @param leaf leaf node of theme definition three. It can be a primitive value or other mixin
 * (ex. mixins.palette.primary) or string reference (ex. 'palette.primary')
 * @param path path of node relative to theme definition root (ex. pill.primary.button.background.color)
 * @param props value of properties from a styled component, including theme tree value
 */
export const resolveValue = <Id extends ThemeId>(
  id: Id,
  leaf: Leaf,
  path: string,
  props: MixinProps<any, any>,
) => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const override = findOverride(props, id, path);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const reference = override ?? leaf;

  if (typeof reference === 'function') {
    // reference to other mixin, just call it
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return
    return reference(props);
  }
  // primitive value or old-school string path reference to global theme
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
  return get(props.theme, reference, reference); // we still support string based mixins, we need to try to lookup them
};
