import { Leaf, Node, ParentNode } from '../types';

export type StyledMixin<
  ThemeType extends Record<string, unknown>,
  PropsType = Record<string, unknown>,
  ReturnType = string,
> = (props: PropsType & { theme: ThemeType }) => ReturnType;
export type MappedNode<N extends Node, M> = N extends Leaf
  ? MappedLeaf<M>
  : MappedParentNode<N, M>;
export type NodeMapper<M> = (leaf: Node, currentPath: string) => M;
type MappedLeaf<M> = M;
type MappedParentNode<N extends Node, M> = {
  [K in keyof N]: N[K] extends Leaf
    ? MappedLeaf<M>
    : N[K] extends ParentNode
    ? MappedParentNode<N[K], M>
    : never;
};
