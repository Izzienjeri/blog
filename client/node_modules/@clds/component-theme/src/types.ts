type ComponentOverrides = {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,no-unused-vars
  [componentId in ThemeId]: any;
};
export interface ThemeWithOverrides {
  components?: ComponentOverrides;
}

export type DeepPartial<T> = T extends Record<string, unknown>
  ? {
      [P in keyof T]?: DeepPartial<T[P]>;
    }
  : T;

export type ThemeId = symbol | string;

/**
 * Represents any mixin function that can be consumed in styled component
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type MixinFunction = (...args: any) => any;

/**
 * Represents props that are passed to mixin
 */
export type MixinProps<
  PropsType,
  ThemeType extends ThemeWithOverrides = Record<string, unknown>,
> = PropsType & {
  theme: ThemeType;
};

/**
 * Represent tree of definition given to createTheme() function
 */
export type Leaf = string | number | boolean | MixinFunction;
export type Node = Leaf | ParentNode;
// eslint rule conflict - type and interface with no members are both reported as invalid but it is valid in TS
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface ParentNode {}
