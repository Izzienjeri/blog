import { expect } from 'chai';
import { forEach } from 'lodash';

// eslint-disable-next-line @nx/enforce-module-boundaries
import defaultTheme from '@clds/themes';

import { generateTheme, Theme } from '../src/generateTheme';

type Leaf = string | number;
type Node = ParentNode | Leaf;
interface ParentNode {
  [key: string]: Node;
}
type TestTheme = Record<string, Node>;

const emptyObject = <T extends TestTheme>(obj: T) =>
  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
  forEach(obj, (v, k) => delete obj[k]);

const mockDefaultTheme = (theme: Theme) => {
  emptyObject(defaultTheme);
  Object.assign(defaultTheme, theme);
};

describe('generateTheme', () => {
  it('should override default theme with theme', () => {
    mockDefaultTheme({ a: 1 });
    const theme = generateTheme({ a: 2 });
    expect(theme).to.include({ a: 2 });
  });

  it('should merge theme with default theme', () => {
    mockDefaultTheme({ a: 1 });
    const theme = generateTheme({ b: 2 });
    expect(theme).to.include({ a: 1, b: 2 });
  });

  it('should get value from reference key if the key value is a reference on default theme', () => {
    mockDefaultTheme({ a: 1 });
    const theme = generateTheme({ b: 'a' });
    expect(theme).to.include({ a: 1, b: 1 });
  });

  it('should get value from reference key if the key value is a reference on theme', () => {
    mockDefaultTheme({ a: 1 });
    const theme = generateTheme({ b: 'c', c: 3 });
    expect(theme).to.include({ a: 1, b: 3, c: 3 });
  });

  it('should run recursively if the key value is an object', () => {
    mockDefaultTheme({ a: { b: { c: 'd' } }, d: 4 });
    const theme = generateTheme({}) as { a: { b: { c: 'd' } }; d: 4 };
    expect(theme.a.b.c).to.equal(4);
  });

  it('should return the reference string if value is not a string', () => {
    mockDefaultTheme({ a: { b: { c: 'a' } }, d: 4 });
    const theme = generateTheme({}) as { a: { b: { c: 'a' } }; d: 4 };
    expect(theme.a.b.c).to.equal('a');
  });

  it('should throw an error if there is a cyclic dependency', () => {
    mockDefaultTheme({ a: 'b', b: 'a' });
    expect(() => {
      generateTheme({});
    }).to.throw();
  });
});
