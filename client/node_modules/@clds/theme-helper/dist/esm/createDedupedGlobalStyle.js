import React, { useEffect } from 'react';
import { createRoot } from 'react-dom/client';
import { createGlobalStyle, useTheme } from 'styled-components';
const globalStyles = new Map();
let stylesRoot;
const ensureStylesRootReady = () => {
    if (stylesRoot) {
        return;
    }
    if (typeof window === 'undefined') {
        return console.warn('No document to render global styles');
    }
    const element = window.document.createElement('div');
    window.document.head.appendChild(element);
    stylesRoot = createRoot(element);
};
const useDedupedStyleRendering = (key, styleElement) => {
    const shouldUpdateStyles = !globalStyles.has(key);
    if (shouldUpdateStyles) {
        globalStyles.set(key, styleElement);
    }
    useEffect(() => {
        if (shouldUpdateStyles && stylesRoot) {
            const styleTags = Array.from(globalStyles).map((entry) => entry[1]);
            stylesRoot.render(React.createElement(React.Fragment, null, styleTags));
        }
    }, [shouldUpdateStyles]);
};
function createDedupedGlobalStyle(first, ...interpolations) {
    const GlobalStyle = createGlobalStyle(first, ...interpolations);
    return ({ id }) => {
        const theme = useTheme();
        ensureStylesRootReady();
        useDedupedStyleRendering(id, React.createElement(GlobalStyle, { key: id, theme: theme }));
        return null;
    };
}
// name should be the same, otherwise IDE will not see the template string as styles
export { createDedupedGlobalStyle as createGlobalStyle };
//# sourceMappingURL=createDedupedGlobalStyle.js.map