import React, { FC, useEffect } from 'react';
import { createRoot, Root } from 'react-dom/client';
import { createGlobalStyle, useTheme } from 'styled-components';

const globalStyles = new Map<string, JSX.Element>();
let stylesRoot: undefined | Root;

const ensureStylesRootReady = () => {
  if (stylesRoot) {
    return;
  }

  if (typeof window === 'undefined') {
    return console.warn('No document to render global styles');
  }

  const element = window.document.createElement('div');
  window.document.head.appendChild(element);

  stylesRoot = createRoot(element);
};

const useDedupedStyleRendering = (key: string, styleElement: JSX.Element) => {
  const shouldUpdateStyles = !globalStyles.has(key);

  if (shouldUpdateStyles) {
    globalStyles.set(key, styleElement);
  }

  useEffect(() => {
    if (shouldUpdateStyles && stylesRoot) {
      const styleTags = Array.from(globalStyles).map((entry) => entry[1]);

      stylesRoot.render(<>{styleTags}</>);
    }
  }, [shouldUpdateStyles]);
};

export interface DedupedGlobalStyle {
  id: string;
}

export type CreateGlobalStyleParams = Parameters<typeof createGlobalStyle>;
function createDedupedGlobalStyle(
  first: CreateGlobalStyleParams['0'],
  ...interpolations: Array<CreateGlobalStyleParams['0']>
): FC<DedupedGlobalStyle> {
  const GlobalStyle = createGlobalStyle(first, ...interpolations);
  return ({ id }) => {
    const theme = useTheme();
    ensureStylesRootReady();
    useDedupedStyleRendering(id, <GlobalStyle key={id} theme={theme} />);
    return null;
  };
}
// name should be the same, otherwise IDE will not see the template string as styles
export { createDedupedGlobalStyle as createGlobalStyle };
