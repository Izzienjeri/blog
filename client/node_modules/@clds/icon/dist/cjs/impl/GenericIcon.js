"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericIcon = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const styled_components_1 = tslib_1.__importStar(require("styled-components"));
const blender_1 = require("@clds/blender");
const component_theme_1 = require("@clds/component-theme");
const design_system_foundations_1 = require("@clds/design-system-foundations");
const theme_1 = require("./theme");
const palette = component_theme_1.globalTheme.palette;
const getColor = (colorName) => { var _a; return (_a = palette[colorName]) !== null && _a !== void 0 ? _a : colorName; };
const StyledSvg = styled_components_1.default.svg `
  width: ${(0, theme_1.iconNextSizeVariant)((variant) => variant.width)};
  height: ${(0, theme_1.iconNextSizeVariant)((variant) => variant.width)};
  fill: ${(props) => props.color === undefined
    ? (0, styled_components_1.css) `var(${blender_1.blenderCss.variables.foregroundColor}, currentColor)`
    : getColor(props.color)};
`;
const { useFoundation } = (0, design_system_foundations_1.createUseFoundationHook)(({ size }) => ({ size: size === 'xxs' ? 'xs' : size }), (props) => props, { size: 'md' });
const GenericIcon = (_a) => {
    var { size, color, path } = _a, rest = tslib_1.__rest(_a, ["size", "color", "path"]);
    const foundation = useFoundation({ size });
    return (react_1.default.createElement(StyledSvg, Object.assign({ "data-test": "icon" }, foundation.componentProps, { color: color, viewBox: "0 0 24 24", preserveAspectRatio: "xMidYMid" }, rest),
        react_1.default.createElement("path", { d: path })));
};
exports.GenericIcon = GenericIcon;
//# sourceMappingURL=GenericIcon.js.map