import { Component, ComponentType } from 'react';
import { IconProps } from './types';
export declare const getMemoizedLayoutIcon: (iconComponent: ComponentType<IconProps>) => ComponentType<IconProps>;
declare type ExactIconSize = '18' | '24' | '36' | '48';
export interface LayoutIconProps extends Omit<IconProps, 'size'> {
    iconSize: ExactIconSize;
    iconComponent: ComponentType<IconProps>;
}
/**
 * Component that tweaks existing icon components.
 * It resizes icons to match industry standard size and adds extra padding in order to align with
 * design system layout tokens.
 * @experimental Use it carefully, please report any feedback to #design-system channel.
 * Please note that this may break the layout if non-standard spacing is provided in the theme.
 * @param iconComponent the original icon component to tweak. All props will be passed to it.
 */
export declare class LayoutIcon extends Component<LayoutIconProps> {
    /**
     * If you wonder why this is an old-fashioned class function, it is due to styled components:
     * https://github.com/styled-components/styled-components/blob/061736aa6dbaf8e21168db1c07bb2d061d9f2546/packages/styled-components/src/utils/checkDynamicCreation.ts#L35
     * They warn about dynamic component creation to early prevent common mistake that developers make.
     * We want to create them lazily (with memoization) since we don't want to depend statically on any icon.
     * We also don't want to affect official API since this component is experimental only.
     */
    render(): import("react").ReactElement<IconProps, string | import("react").JSXElementConstructor<any>>;
}
export {};
