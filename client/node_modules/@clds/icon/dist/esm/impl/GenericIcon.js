import { __rest } from "tslib";
import React from 'react';
import styled, { css } from 'styled-components';
import { blenderCss } from '@clds/blender';
import { globalTheme } from '@clds/component-theme';
import { createUseFoundationHook } from '@clds/design-system-foundations';
import { iconNextSizeVariant } from './theme';
const palette = globalTheme.palette;
const getColor = (colorName) => { var _a; return (_a = palette[colorName]) !== null && _a !== void 0 ? _a : colorName; };
const StyledSvg = styled.svg `
  width: ${iconNextSizeVariant((variant) => variant.width)};
  height: ${iconNextSizeVariant((variant) => variant.width)};
  fill: ${(props) => props.color === undefined
    ? css `var(${blenderCss.variables.foregroundColor}, currentColor)`
    : getColor(props.color)};
`;
const { useFoundation } = createUseFoundationHook(({ size }) => ({ size: size === 'xxs' ? 'xs' : size }), (props) => props, { size: 'md' });
export const GenericIcon = (_a) => {
    var { size, color, path } = _a, rest = __rest(_a, ["size", "color", "path"]);
    const foundation = useFoundation({ size });
    return (React.createElement(StyledSvg, Object.assign({ "data-test": "icon" }, foundation.componentProps, { color: color, viewBox: "0 0 24 24", preserveAspectRatio: "xMidYMid" }, rest),
        React.createElement("path", { d: path })));
};
//# sourceMappingURL=GenericIcon.js.map