import { IconSize } from './types';
export declare const theme: import("@clds/component-theme/src/api/createTheme.types").Compiled<import("@clds/component-theme").Mixin<{
    bySize: {
        xs: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        sm: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        md: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        lg: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        xl: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        xxl: {
            width: import("@clds/component-theme").Mixin<string>;
        };
    };
}>> & import("@clds/component-theme/src/api/createTheme.types").MappedChildren<{
    bySize: {
        xs: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        sm: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        md: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        lg: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        xl: {
            width: import("@clds/component-theme").Mixin<string>;
        };
        xxl: {
            width: import("@clds/component-theme").Mixin<string>;
        };
    };
}> & {
    [idField]: import("@clds/component-theme/src/types").ThemeId;
};
export interface ThemeProps {
    size: IconSize;
}
export declare const iconNextSizeVariant: <R>(calculator?: ((value: {
    width: string;
} | {
    width: string;
} | {
    width: string;
} | {
    width: string;
} | {
    width: string;
} | {
    width: string;
}, props: ThemeProps) => R) | undefined) => (props: ThemeProps) => any;
