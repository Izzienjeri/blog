import { assert, expect } from 'chai';
import React from 'react';

import 'global-jsdom/register';
import { blenderCss } from '@clds/blender';
import { getDefaultValue, globalTheme } from '@clds/component-theme';
import { FoundationContextProvider } from '@clds/design-system-foundations';
import { assertSameColor, TestThemeWrapper } from '@clds/testing';
import { render } from '@clds/testing-library';

import { GenericIcon } from './GenericIcon';

/* eslint-disable @typescript-eslint/no-non-null-assertion */
describe('GenericIcon', () => {
  it('should render correct path', () => {
    const screen = render(<GenericIcon path="fake path" />);

    assert.equal(
      screen.container.querySelector('path')?.getAttribute('d'),
      'fake path',
    );
  });

  it('should render svg using correct color when tone and variant provided', () => {
    const screen = render(
      <TestThemeWrapper>
        <GenericIcon path="fake path" color="successAlt" />
      </TestThemeWrapper>,
    );

    const svg = screen.container.querySelector('svg');
    assert.ok(svg);
    const iconFill = getComputedStyle(svg!).fill;
    assertSameColor(iconFill, getDefaultValue(globalTheme.palette.successAlt));
  });

  it('should render svg using correct color when custom color provided', () => {
    const screen = render(
      <TestThemeWrapper>
        <GenericIcon path="fake path" color="red" />
      </TestThemeWrapper>,
    );

    const svg = screen.container.querySelector('svg');
    assert.ok(svg);
    const iconFill = getComputedStyle(svg!).fill;
    assertSameColor(iconFill, 'red');
  });

  it('should render svg using correct size', () => {
    const screen = render(
      <TestThemeWrapper>
        <GenericIcon path="fake path" size="lg" />
      </TestThemeWrapper>,
    );

    const svg = screen.container.querySelector('svg');
    assert.ok(svg);
    const iconWidth = getComputedStyle(svg!).width;
    assert.equal(iconWidth, getDefaultValue(globalTheme.spacing.lg));
  });

  it('should render svg using correct size when in foundation context', () => {
    const screen = render(
      <TestThemeWrapper>
        <FoundationContextProvider size="xxl">
          <GenericIcon path="fake path" />
        </FoundationContextProvider>
      </TestThemeWrapper>,
    );

    const svg = screen.container.querySelector('svg');
    assert.ok(svg);
    const iconWidth = getComputedStyle(svg!).width;
    assert.equal(iconWidth, getDefaultValue(globalTheme.spacing.xxl));
  });

  it('should provide default props', () => {
    const screen = render(
      <TestThemeWrapper>
        <GenericIcon path="fake path" />
      </TestThemeWrapper>,
    );

    const svg = screen.container.querySelector('svg');
    assert.ok(svg);
    const iconStyle = getComputedStyle(svg!);

    assert.equal(iconStyle.width, getDefaultValue(globalTheme.spacing.md));
    expect(iconStyle.fill).include(blenderCss.variables.foregroundColor);
  });

  it('should provide default size when foundation size is xxs', () => {
    const screen = render(
      <TestThemeWrapper>
        <FoundationContextProvider size="xxs">
          <GenericIcon path="fake path" />
        </FoundationContextProvider>
      </TestThemeWrapper>,
    );

    const svg = screen.container.querySelector('svg');
    assert.ok(svg);
    const iconStyle = getComputedStyle(svg!);

    assert.equal(iconStyle.width, getDefaultValue(globalTheme.spacing.xs));
  });
});
