import { assert } from 'chai';
import React from 'react';
import 'global-jsdom/register';

import { render } from '@clds/testing-library';

import { getMemoizedLayoutIcon, LayoutIcon } from './LayoutIcon';
import { CrossInCircle, OpenInNew } from '..';

describe('LayoutIcon', () => {
  describe('should override the size and specify the padding', () => {
    it('24px', () => {
      const screen = render(
        <LayoutIcon
          data-test-specifier="icon"
          iconComponent={CrossInCircle}
          iconSize="24"
        />,
      );
      const icon = screen.getByTestSpecifier('icon');
      const computedStyle = window.getComputedStyle(icon);

      assert.strictEqual(computedStyle.width, '32px');
      assert.strictEqual(computedStyle.padding, '4px');
    });

    it('48px', () => {
      const screen = render(
        <LayoutIcon
          data-test-specifier="icon"
          iconComponent={CrossInCircle}
          iconSize="48"
        />,
      );
      const computedStyle = window.getComputedStyle(
        screen.getByTestSpecifier('icon'),
      );
      assert.strictEqual(computedStyle.width, '48px');
      assert.strictEqual(computedStyle.padding, '0px');
    });
  });

  it('should pass other props to internal icon', () => {
    const screen = render(
      <LayoutIcon
        data-test-specifier="icon"
        iconComponent={CrossInCircle}
        iconSize="48"
        color="green"
      />,
    );
    const computedStyle = window.getComputedStyle(
      screen.getByTestSpecifier('icon'),
    );
    assert.strictEqual(computedStyle.fill, 'green');
  });

  it('should memoize components', () => {
    const crossInCircle1 = getMemoizedLayoutIcon(CrossInCircle);
    const crossInCircle2 = getMemoizedLayoutIcon(CrossInCircle);
    const openInNew1 = getMemoizedLayoutIcon(OpenInNew);
    const openInNew2 = getMemoizedLayoutIcon(OpenInNew);

    crossInCircle1.displayName = 'crossInCircleTest1';
    crossInCircle2.displayName = 'crossInCircleTest2';
    openInNew1.displayName = 'openInNewTest1';
    openInNew2.displayName = 'openInNewTest2';

    assert.strictEqual(crossInCircle1.displayName, 'crossInCircleTest2');
    assert.strictEqual(crossInCircle2.displayName, 'crossInCircleTest2');

    assert.strictEqual(openInNew1.displayName, 'openInNewTest2');
    assert.strictEqual(openInNew2.displayName, 'openInNewTest2');
  });
});
