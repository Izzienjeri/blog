import React, { FC } from 'react';
import styled, { css } from 'styled-components';

import { blenderCss, OpaqueColorName } from '@clds/blender';
import { globalTheme } from '@clds/component-theme';
import { createUseFoundationHook } from '@clds/design-system-foundations';

import { iconNextSizeVariant, ThemeProps } from './theme';
import { IconProps } from './types';

export interface GenericIconProps extends IconProps {
  path: string;
}

const palette = globalTheme.palette;

const getColor = (colorName: string | OpaqueColorName) =>
  palette[colorName as unknown as keyof typeof palette] ?? colorName;

const StyledSvg = styled.svg<ThemeProps & Pick<GenericIconProps, 'color'>>`
  width: ${iconNextSizeVariant((variant) => variant.width)};
  height: ${iconNextSizeVariant((variant) => variant.width)};
  fill: ${(props) =>
    props.color === undefined
      ? css`var(${blenderCss.variables.foregroundColor}, currentColor)`
      : getColor(props.color)};
`;

const { useFoundation } = createUseFoundationHook<Pick<IconProps, 'size'>>(
  ({ size }) => ({ size: size === 'xxs' ? 'xs' : size }),
  (props) => props,
  { size: 'md' },
);

export const GenericIcon: FC<GenericIconProps> = ({
  size,
  color,
  path,
  ...rest
}) => {
  const foundation = useFoundation({ size });

  return (
    <StyledSvg
      data-test="icon"
      {...foundation.componentProps}
      color={color}
      viewBox="0 0 24 24"
      preserveAspectRatio="xMidYMid"
      {...rest}
    >
      <path d={path} />
    </StyledSvg>
  );
};
