/* eslint-disable no-unused-vars */
import { Assign } from 'utility-types';

export type Undefinable<T> = T | undefined;

/**
 * Allows to make certain field an union with specific type.
 * It can work similar to PartialBy but can be more specific,
 * for example not make field optional but add undefined type to given field
 * @example
 * interface Test {
 *  a: string;
 *  b: string;
 *  c: string;
 * }
 *
 * type SpecificCanBeUndefined = UnionBy<Test, undefined, 'a' | 'b'>;
 * type SpecificCanBeNull = UnionBy<Test, null, 'a' | 'b'>;
 */
export type UnionBy<T, V, K extends keyof T> = {
  [k in keyof T]: k extends K ? T[k] | V : T[k];
};

/**
 * Similar to UnionBy but it replaces the type not makes an union
 */
export type ReplaceBy<T, V, K extends keyof T> = {
  [k in keyof T]: k extends K ? V : T[k];
};

/**
 * This is advanced type that allows to change value of conditional types
 * It allows to change type of field B only if field A has certain type
 *
 * @example
 * type Example = {kind: 'string', value: string} | {kind: 'date', value: string}
 * type Experiment = MapDependentField<Example, 'kind', 'date', 'value', number>
 *
 * // result:
 *
 * type Experiment = {kind: 'string', value: string} | {kind: 'date', value: number}
 *
 */
// prettier-ignore
export type MapDependentField<
  T,
  DependentPropertyName extends keyof T,
  DependentPropertyValue extends T[DependentPropertyName],
  MappedPropertyName extends keyof T,
  MappedPropertyValue,
// eslint-disable-next-line @typescript-eslint/no-explicit-any
> = T extends { [P in DependentPropertyName]: DependentPropertyValue } & { [P in MappedPropertyName]: any; }
  ? Assign<T, { [P in MappedPropertyName]: MappedPropertyValue }>
  : T;

export const isFieldOfObject = <T>(
  object: T,
  field: string | number | symbol,
): field is keyof T => field in object;

export type MapValuesToType<U, T> = { [k in keyof U]: T };

export type DeepMap<Keys extends Array<string>, Value> = Keys extends [
  infer Key,
  ...infer OtherKeys,
]
  ? Record<
      Key extends string ? Key : never,
      DeepMap<OtherKeys extends Array<string> ? OtherKeys : never, Value>
    >
  : Value;
