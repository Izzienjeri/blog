// Inspired by: https://typescript-book.com/ Lesson 44
export type JSONified<T> = T extends string | number | boolean | null
  ? T
  : // eslint-disable-next-line @typescript-eslint/ban-types
  T extends Function
  ? never
  : T extends Array<infer U>
  ? JSONifiedArray<U>
  : // eslint-disable-next-line @typescript-eslint/ban-types
  T extends object
  ? JSONifiedObject<T>
  : never;

type UndefinedAsNull<T> = T extends undefined ? null : T;

type JSONifiedArray<T> = Array<UndefinedAsNull<JSONified<T>>>;

type JSONifiedObject<T> = {
  [P in keyof T]: JSONified<T[P]>;
};
