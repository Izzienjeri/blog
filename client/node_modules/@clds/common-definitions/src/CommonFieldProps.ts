import {
  FocusEvent,
  MouseEventHandler,
  ReactNode,
  SyntheticEvent,
} from 'react';

export type FieldValidationState = 'error' | 'warning' | 'success' | 'none';

/** Interface for props of all form field components (requires implementation of mixed field control). */
export interface CommonFieldProps<ValueType, EventType extends SyntheticEvent> {
  /** field name, standard for  html forms */
  name?: string;
  /** **[Controlled Mode]** Current value of the field. */
  value?: ValueType;
  /** **[Uncontrolled Mode]** Initial value of the field. */
  defaultValue?: ValueType;
  /** Disables the input. */
  isDisabled?: boolean;
  /** Makes the field readonly - content is selectable but not editable. */
  isReadonly?: boolean;
  /** Indicates which validation state styles should be applied. */
  validationState?: FieldValidationState;
  /** **[Controlled Mode]** Callback executed when field value change is requested. */
  onChange?(newValue: ValueType, event: EventType): void;
  /** Called when field focus is blurred. */
  onBlur?(event: FocusEvent<HTMLElement>): void;
  /** Called when field becomes focused. */
  onFocus?(event: FocusEvent<HTMLElement>): void;
  /** Called when field is clicked. */
  onClick?: MouseEventHandler<HTMLElement>;
  children?: ReactNode;
}
