export declare type JSONified<T> = T extends string | number | boolean | null ? T : T extends Function ? never : T extends Array<infer U> ? JSONifiedArray<U> : T extends object ? JSONifiedObject<T> : never;
declare type UndefinedAsNull<T> = T extends undefined ? null : T;
declare type JSONifiedArray<T> = Array<UndefinedAsNull<JSONified<T>>>;
declare type JSONifiedObject<T> = {
    [P in keyof T]: JSONified<T[P]>;
};
export {};
