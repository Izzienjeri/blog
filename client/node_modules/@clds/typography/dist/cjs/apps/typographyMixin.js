"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typographyMixin = exports.getTypographyRuleMixins = void 0;
const styled_components_1 = require("styled-components");
const theme_1 = require("./theme");
const getTypographyRuleMixins = (size, type) => {
    const sizeBranch = theme_1.appsTheme[size];
    if (!size || !type) {
        throw new Error(`Apps typography: type ${type} and size ${size} is not valid configuration`);
    }
    if (!(type in sizeBranch)) {
        throw new Error(`Apps typography: ${type} variant is not supported for ${size} typography`);
    }
    const variantBranch = sizeBranch[type];
    return {
        fontSize: sizeBranch.size,
        lineHeight: sizeBranch.lineHeight,
        color: variantBranch.color,
        fontWeight: variantBranch.weight,
    };
};
exports.getTypographyRuleMixins = getTypographyRuleMixins;
const isProps = (arg1, arg2) => {
    return arg1 !== undefined && arg2 === undefined;
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function typographyMixin(arg1, arg2) {
    const size = isProps(arg1, arg2) ? arg1.size : arg1;
    const type = isProps(arg1, arg2) ? arg1.type : arg2;
    const mixins = (0, exports.getTypographyRuleMixins)(size, type);
    return (0, styled_components_1.css) `
    font-size: ${mixins.fontSize};
    line-height: ${mixins.lineHeight};
    color: ${mixins.color};
    font-weight: ${mixins.fontWeight};
  `;
}
exports.typographyMixin = typographyMixin;
//# sourceMappingURL=typographyMixin.js.map