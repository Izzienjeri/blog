/* eslint-disable @typescript-eslint/ban-ts-comment */
import { expect } from 'chai';

import { typographyMixin } from '../../src/apps/typographyMixin';

describe('typographyMixin', () => {
  it('should should throw error on unsupported type and size', () => {
    // @ts-expect-error
    expect(() => typographyMixin(undefined, undefined)).to.throw(
      'Apps typography: type undefined and size undefined is not valid configuration',
    );
  });

  it('should should throw error on unsupported type', () => {
    expect(() => typographyMixin('xl', 'warning')).to.throw(
      'Apps typography: warning variant is not supported for xl typography',
    );
  });

  /**
   * This test checks if typography returned proper styled tagged literal with proper typography component mixins
   */
  it.skip('should return styled mixin with proper theme values', () => {
    const css = typographyMixin('xl', 'contrastInvert');

    expect(css.map(String)).to.have.members([
      'mixins.xl.size',
      'mixins.xl.lineHeight',
      'mixins.xl.contrastInvert.color',
      'mixins.xl.contrastInvert.weight',
    ]);

    const css2 = typographyMixin('lg', 'regular');
    expect(css2.map(String)).to.have.members([
      'mixins.lg.size',
      'mixins.lg.lineHeight',
      'mixins.lg.regular.color',
      'mixins.lg.regular.weight',
    ]);

    const css3 = typographyMixin({ size: 'lg', type: 'regular' });
    expect(css3.map(String)).to.have.members([
      'mixins.lg.size',
      'mixins.lg.lineHeight',
      'mixins.lg.regular.color',
      'mixins.lg.regular.weight',
    ]);
  });
});
