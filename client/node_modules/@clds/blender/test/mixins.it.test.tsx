import 'global-jsdom/register';
import { render } from '@testing-library/react';
import { expect } from 'chai';
import { parseToRgb } from 'polished';
import React from 'react';
import styled from 'styled-components';

import { getDefaultValue, globalTheme } from '@clds/component-theme';
import { TestThemeWrapper } from '@clds/testing';

import {
  blenderBackground,
  blenderForeground,
  BlenderProps,
  getBlenderTypographyType,
} from '../src';

const Demo = styled.div<BlenderProps>`
  background-color: ${blenderBackground};
  color: ${blenderForeground};
`;

describe('blender', () => {
  it('should produce proper color for solid primary md', () => {
    const screen = render(
      <Demo mode="solidContrast" variant="primary" intensity="md" />,
      { wrapper: TestThemeWrapper },
    );

    const style = getComputedStyle(screen.container.firstChild as Element);

    expect(parseToRgb(style.backgroundColor)).to.deep.equal(
      parseToRgb(getDefaultValue(globalTheme.palette.primary)),
    );
    expect(parseToRgb(style.color)).to.deep.equal(
      parseToRgb(getDefaultValue(globalTheme.palette.contrastInvert)),
    );
  });

  it('should produce proper color for plainContrast warning sm', () => {
    const screen = render(
      <Demo mode="plainContrast" variant="warning" intensity="sm" />,
      { wrapper: TestThemeWrapper },
    );

    const style = getComputedStyle(screen.container.firstChild as Element);

    expect(parseToRgb(style.backgroundColor)).to.deep.equal({
      ...parseToRgb(getDefaultValue(globalTheme.palette.warning)),
      alpha: 0.12,
    });
    expect(parseToRgb(style.color)).to.deep.equal(
      parseToRgb(getDefaultValue(globalTheme.palette.contrastHigh)),
    );
  });

  it('should provide proper typography for plainSolid error', () => {
    const type = getBlenderTypographyType('plainSolid', 'error');
    expect(type).to.equal('error');
  });

  it('should provide proper typography for plainContrast error', () => {
    const type = getBlenderTypographyType('plainContrast', 'error');
    expect(type).to.equal('regular');
  });
});
