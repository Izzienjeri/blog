import 'global-jsdom/register';
import { render } from '@testing-library/react';
import React from 'react';
import styled from 'styled-components';

import { getDefaultValue, globalTheme } from '@clds/component-theme';
import { assertSameColor, TestThemeWrapper } from '@clds/testing';

import { blenderCss } from '../src/blenderCss';

describe('blenderCss', () => {
  it('should pass proper variables into the DOM', () => {
    const Component = styled.div`
      ${blenderCss.populateVariables({
        intensity: 'md',
        mode: 'surfaceSolid',
        variant: 'warning',
      })}
    `;
    const Child = styled.div`
      --bg: ${blenderCss.backgroundFromCssVariables};
      --fg: ${blenderCss.foregroundFromCssVariables};
      ${blenderCss.typographyFromCssVariables('xs')}
    `;

    const screen = render(
      <Component>
        parent
        <Child>test</Child>
      </Component>,
      { wrapper: TestThemeWrapper },
    );

    const parent = screen.getByText('parent');
    const parentStyle = getComputedStyle(parent);
    assertSameColor(
      parentStyle.getPropertyValue(blenderCss.variables.backgroundColor),
      getDefaultValue(globalTheme.palette.surface),
    );
    assertSameColor(
      parentStyle.getPropertyValue(blenderCss.variables.foregroundColor),
      getDefaultValue(globalTheme.palette.warningAlt),
    );
  });
});
