"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlenderTypographyType = exports.blenderForeground = exports.blenderBackground = exports.getForegroundBlendOptions = exports.getBackgroundBlendOptions = exports.resolveColor = void 0;
const color_blend_1 = require("color-blend");
const polished_1 = require("polished");
const mapping_1 = require("./mapping");
const toColorBlendRgba = (color) => ({
    r: color.red,
    g: color.green,
    b: color.blue,
    a: 'alpha' in color ? color.alpha : 1,
});
const fromBlendToPolishedRgba = (color) => ({
    red: color.r,
    green: color.g,
    blue: color.b,
    alpha: color.a,
});
const toPolishedRgba = (color) => color === 'transparent'
    ? { red: 255, green: 255, blue: 255, alpha: 0 }
    : (0, polished_1.parseToRgb)(color);
const resolveColor = (color, colors) => (color === 'transparent' ? 'transparent' : colors[color]);
exports.resolveColor = resolveColor;
const computeBlendColor = (blending, colors) => {
    const baseColor = (0, exports.resolveColor)(blending.baseColor, colors);
    const blendColor = (0, polished_1.rgba)((0, exports.resolveColor)(blending.blendColor, colors), blending.blendOpacity);
    const blendBackdrop = toColorBlendRgba(toPolishedRgba(baseColor));
    const blendSource = toColorBlendRgba(toPolishedRgba(blendColor));
    return (0, polished_1.rgbToColorString)(fromBlendToPolishedRgba((0, color_blend_1.normal)(blendBackdrop, blendSource)));
};
const getBackgroundBlendOptions = (props) => mapping_1.backgroundMapping[props.mode][props.variant][props.intensity];
exports.getBackgroundBlendOptions = getBackgroundBlendOptions;
const getForegroundBlendOptions = (props) => mapping_1.foregroundMapping[props.mode][props.variant];
exports.getForegroundBlendOptions = getForegroundBlendOptions;
const blenderBackground = (props) => computeBlendColor((0, exports.getBackgroundBlendOptions)(props), props.theme.palette);
exports.blenderBackground = blenderBackground;
const blenderForeground = (props) => (0, exports.resolveColor)((0, exports.getForegroundBlendOptions)(props).colorName, props.theme.palette);
exports.blenderForeground = blenderForeground;
const getBlenderTypographyType = (mode, variant) => mapping_1.foregroundMapping[mode][variant].typography;
exports.getBlenderTypographyType = getBlenderTypographyType;
//# sourceMappingURL=blender.js.map