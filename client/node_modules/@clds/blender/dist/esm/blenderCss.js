import { css } from 'styled-components';
import { appsTheme, getTypographyRuleMixins, } from '@clds/typography';
import { blenderBackground, blenderForeground, getBlenderTypographyType, } from './blender';
const prefix = '--ds-foundations';
const typography = `${prefix}--typography`;
const variables = {
    typographyColor: `${typography}--color`,
    typographyFontWeight: `${typography}--font-weight`,
    backgroundColor: `${prefix}--background-color`,
    foregroundColor: `${prefix}--foreground-color`,
};
const populateVariables = (props) => (componentProps) => {
    const backgroundColor = blenderBackground(Object.assign(Object.assign({}, props), componentProps));
    const foregroundColor = blenderForeground(Object.assign(Object.assign({}, props), componentProps));
    const typographyType = getBlenderTypographyType(props.mode, props.variant);
    const exampleTypographyRuleMixins = getTypographyRuleMixins('xs', typographyType);
    return css `
      ${variables.backgroundColor}: ${backgroundColor};
      ${variables.foregroundColor}: ${foregroundColor};
      ${variables.typographyColor}: ${exampleTypographyRuleMixins.color};
      ${variables.typographyFontWeight}: ${exampleTypographyRuleMixins.fontWeight};
    `;
};
const typographyFromCssVariables = (size) => css `
  font-size: ${appsTheme[size].size};
  line-height: ${appsTheme[size].lineHeight};
  color: var(${variables.typographyColor});
  font-weight: var(${variables.typographyFontWeight});
`;
const backgroundFromCssVariables = `var(${variables.backgroundColor})`;
const foregroundFromCssVariables = `var(${variables.foregroundColor})`;
export const blenderCss = {
    variables,
    populateVariables,
    typographyFromCssVariables,
    backgroundFromCssVariables,
    foregroundFromCssVariables,
};
//# sourceMappingURL=blenderCss.js.map