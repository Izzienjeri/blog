import { normal } from 'color-blend';
import { RGBA as ColorBlendRgba } from 'color-blend/dist/types';
import { parseToRgb, rgba, rgbToColorString } from 'polished';
import {
  RgbaColor as PolishedRgba,
  RgbColor as PolishedRgb,
} from 'polished/lib/types/color';

import { GlobalTheme } from '@clds/component-theme';

import {
  BlenderBackgroundProps,
  BlenderForegroundProps,
  BlendMode,
  BlendVariant,
} from './BlenderProps';
import {
  BackgroundBlendOptions,
  ColorName,
  OpaqueColorName,
} from './blendOptions';
import { backgroundMapping, foregroundMapping } from './mapping';

const toColorBlendRgba = (
  color: PolishedRgba | PolishedRgb,
): ColorBlendRgba => ({
  r: color.red,
  g: color.green,
  b: color.blue,
  a: 'alpha' in color ? color.alpha : 1,
});

const fromBlendToPolishedRgba = (color: ColorBlendRgba): PolishedRgba => ({
  red: color.r,
  green: color.g,
  blue: color.b,
  alpha: color.a,
});

const toPolishedRgba = (color: string): PolishedRgba | PolishedRgb =>
  color === 'transparent'
    ? { red: 255, green: 255, blue: 255, alpha: 0 }
    : parseToRgb(color);

export const resolveColor = (
  color: ColorName,
  colors: Record<OpaqueColorName, string>,
) => (color === 'transparent' ? 'transparent' : colors[color]);

const computeBlendColor = (
  blending: BackgroundBlendOptions,
  colors: Record<Exclude<ColorName, 'transparent'>, string>,
) => {
  const baseColor = resolveColor(blending.baseColor, colors);
  const blendColor = rgba(
    resolveColor(blending.blendColor, colors),
    blending.blendOpacity,
  );
  const blendBackdrop = toColorBlendRgba(toPolishedRgba(baseColor));
  const blendSource = toColorBlendRgba(toPolishedRgba(blendColor));

  return rgbToColorString(
    fromBlendToPolishedRgba(normal(blendBackdrop, blendSource)),
  );
};

export const getBackgroundBlendOptions = (props: BlenderBackgroundProps) =>
  backgroundMapping[props.mode][props.variant][props.intensity];

export const getForegroundBlendOptions = (props: BlenderForegroundProps) =>
  foregroundMapping[props.mode][props.variant];

export const blenderBackground = (
  props: BlenderBackgroundProps & { theme: GlobalTheme },
) => computeBlendColor(getBackgroundBlendOptions(props), props.theme.palette);

export const blenderForeground = (
  props: BlenderForegroundProps & { theme: GlobalTheme },
) =>
  resolveColor(getForegroundBlendOptions(props).colorName, props.theme.palette);

export const getBlenderTypographyType = (
  mode: BlendMode,
  variant: BlendVariant,
) => foregroundMapping[mode][variant].typography;
