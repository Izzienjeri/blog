import { css } from 'styled-components';

import { GlobalTheme } from '@clds/component-theme';
import {
  appsTheme,
  getTypographyRuleMixins,
  TypographySize,
} from '@clds/typography';

import {
  blenderBackground,
  blenderForeground,
  getBlenderTypographyType,
} from './blender';
import { BlenderProps } from './BlenderProps';

const prefix = '--ds-foundations' as const;
const typography = `${prefix}--typography` as const;

const variables = {
  typographyColor: `${typography}--color` as const,
  typographyFontWeight: `${typography}--font-weight` as const,
  backgroundColor: `${prefix}--background-color` as const,
  foregroundColor: `${prefix}--foreground-color` as const,
};

const populateVariables =
  (props: BlenderProps) => (componentProps: { theme: GlobalTheme }) => {
    const backgroundColor = blenderBackground({ ...props, ...componentProps });
    const foregroundColor = blenderForeground({ ...props, ...componentProps });
    const typographyType = getBlenderTypographyType(props.mode, props.variant);

    const exampleTypographyRuleMixins = getTypographyRuleMixins(
      'xs',
      typographyType,
    );

    return css`
      ${variables.backgroundColor}: ${backgroundColor};
      ${variables.foregroundColor}: ${foregroundColor};
      ${variables.typographyColor}: ${exampleTypographyRuleMixins.color};
      ${variables.typographyFontWeight}: ${exampleTypographyRuleMixins.fontWeight};
    `;
  };

const typographyFromCssVariables = (size: TypographySize) => css`
  font-size: ${appsTheme[size].size};
  line-height: ${appsTheme[size].lineHeight};
  color: var(${variables.typographyColor});
  font-weight: var(${variables.typographyFontWeight});
`;

const backgroundFromCssVariables = `var(${variables.backgroundColor})`;
const foregroundFromCssVariables = `var(${variables.foregroundColor})`;

export const blenderCss = {
  variables,
  populateVariables,
  typographyFromCssVariables,
  backgroundFromCssVariables,
  foregroundFromCssVariables,
};
