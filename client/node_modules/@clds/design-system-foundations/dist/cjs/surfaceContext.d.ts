import React, { FC, ReactNode } from 'react';
import { SurfaceContext } from './types';
export declare const useSurfaceContext: () => SurfaceContext | undefined;
export declare const SurfaceContextProvider: FC<SurfaceContext & {
    children?: ReactNode | Array<ReactNode>;
}>;
/**
 * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults
 */
export declare const SurfaceContextReset: <Props>(props: Props) => React.JSX.Element;
/**
 * Allows to integrate the component with surface context by creating component props default values from context using provided mapping.
 * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.
 * @param contextToProps maps current context into default component properties.
 * @param propsToInnerContext maps final component props into context that can be provided for component children.
 * @param defaultProps component default props when context is not provided
 **/
export declare const createUseSurfaceHook: <P>(contextToProps: (context: SurfaceContext) => Required<P>, propsToInnerContext: (props: Required<P>) => SurfaceContext, defaultProps: Required<P>) => {
    useSurface: (props: P) => {
        componentProps: NonNullable<Required<P> & P>;
        innerContextProps: SurfaceContext;
    };
};
