"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUseSurfaceHook = exports.SurfaceContextReset = exports.SurfaceContextProvider = exports.useSurfaceContext = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const react_1 = tslib_1.__importStar(require("react"));
const surfaceContext = (0, react_1.createContext)(undefined);
const useSurfaceContext = () => (0, react_1.useContext)(surfaceContext);
exports.useSurfaceContext = useSurfaceContext;
const SurfaceContextProvider = ({ tone, variant, children }) => {
    const contextValue = (0, react_1.useMemo)(() => ({
        tone,
        variant,
    }), [tone, variant]);
    return (react_1.default.createElement(surfaceContext.Provider, { value: contextValue }, children));
};
exports.SurfaceContextProvider = SurfaceContextProvider;
/* eslint-disable max-len,@typescript-eslint/comma-dangle */
/**
 * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults
 */
const SurfaceContextReset = (props) => (react_1.default.createElement(surfaceContext.Provider, Object.assign({ value: undefined }, props)));
exports.SurfaceContextReset = SurfaceContextReset;
/**
 * Allows to integrate the component with surface context by creating component props default values from context using provided mapping.
 * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.
 * @param contextToProps maps current context into default component properties.
 * @param propsToInnerContext maps final component props into context that can be provided for component children.
 * @param defaultProps component default props when context is not provided
 **/
const createUseSurfaceHook = (contextToProps, propsToInnerContext, defaultProps) => ({
    useSurface: (props) => {
        const surfaceContext = (0, exports.useSurfaceContext)();
        const componentProps = (0, lodash_1.defaults)({}, props, surfaceContext ? contextToProps(surfaceContext) : defaultProps);
        const innerContextProps = propsToInnerContext(componentProps);
        return { componentProps, innerContextProps };
    },
});
exports.createUseSurfaceHook = createUseSurfaceHook;
//# sourceMappingURL=surfaceContext.js.map