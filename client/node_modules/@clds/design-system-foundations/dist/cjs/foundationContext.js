"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUseFoundationHook = exports.FoundationContextReset = exports.useFoundationContext = exports.FoundationContextProvider = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const react_1 = tslib_1.__importStar(require("react"));
const foundationContext = (0, react_1.createContext)(undefined);
const FoundationContextProvider = ({ size, children }) => {
    const contextValue = (0, react_1.useMemo)(() => ({
        size,
    }), [size]);
    return (react_1.default.createElement(foundationContext.Provider, { value: contextValue }, children));
};
exports.FoundationContextProvider = FoundationContextProvider;
const useFoundationContext = () => (0, react_1.useContext)(foundationContext);
exports.useFoundationContext = useFoundationContext;
/* eslint-disable max-len,@typescript-eslint/comma-dangle */
/**
 * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults
 */
const FoundationContextReset = (props) => (react_1.default.createElement(foundationContext.Provider, Object.assign({ value: undefined }, props)));
exports.FoundationContextReset = FoundationContextReset;
/**
 * Allows to integrate the component with foundation context by creating component props default values from context using provided mapping.
 * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.
 * @param contextToProps maps current context into default component properties.
 * @param propsToInnerContext maps final component props into context that can be provided for component children.
 * @param defaultProps component default props when context is not provided
 **/
const createUseFoundationHook = (contextToProps, propsToInnerContext, defaultProps) => ({
    useFoundation: (props) => {
        const foundationContext = (0, exports.useFoundationContext)();
        const componentProps = (0, lodash_1.defaults)({}, props, foundationContext ? contextToProps(foundationContext) : defaultProps);
        const innerContextProps = propsToInnerContext(componentProps);
        return { componentProps, innerContextProps };
    },
});
exports.createUseFoundationHook = createUseFoundationHook;
//# sourceMappingURL=foundationContext.js.map