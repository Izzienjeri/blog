import { defaults } from 'lodash';
import React, { createContext, useContext, useMemo, } from 'react';
const surfaceContext = createContext(undefined);
export const useSurfaceContext = () => useContext(surfaceContext);
export const SurfaceContextProvider = ({ tone, variant, children }) => {
    const contextValue = useMemo(() => ({
        tone,
        variant,
    }), [tone, variant]);
    return (React.createElement(surfaceContext.Provider, { value: contextValue }, children));
};
/* eslint-disable max-len,@typescript-eslint/comma-dangle */
/**
 * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults
 */
export const SurfaceContextReset = (props) => (React.createElement(surfaceContext.Provider, Object.assign({ value: undefined }, props)));
/**
 * Allows to integrate the component with surface context by creating component props default values from context using provided mapping.
 * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.
 * @param contextToProps maps current context into default component properties.
 * @param propsToInnerContext maps final component props into context that can be provided for component children.
 * @param defaultProps component default props when context is not provided
 **/
export const createUseSurfaceHook = (contextToProps, propsToInnerContext, defaultProps) => ({
    useSurface: (props) => {
        const surfaceContext = useSurfaceContext();
        const componentProps = defaults({}, props, surfaceContext ? contextToProps(surfaceContext) : defaultProps);
        const innerContextProps = propsToInnerContext(componentProps);
        return { componentProps, innerContextProps };
    },
});
//# sourceMappingURL=surfaceContext.js.map