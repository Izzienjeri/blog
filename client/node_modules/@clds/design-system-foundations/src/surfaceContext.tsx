import { defaults } from 'lodash';
import React, {
  createContext,
  FC,
  ReactNode,
  useContext,
  useMemo,
} from 'react';

import { SurfaceContext } from './types';

const surfaceContext = createContext<SurfaceContext | undefined>(undefined);

export const useSurfaceContext = () => useContext(surfaceContext);

export const SurfaceContextProvider: FC<
  SurfaceContext & { children?: ReactNode | Array<ReactNode> }
> = ({ tone, variant, children }) => {
  const contextValue = useMemo<SurfaceContext>(
    () => ({
      tone,
      variant,
    }),
    [tone, variant],
  );
  return (
    <surfaceContext.Provider value={contextValue}>
      {children}
    </surfaceContext.Provider>
  );
};

/* eslint-disable max-len,@typescript-eslint/comma-dangle */

/**
 * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults
 */
export const SurfaceContextReset = <Props,>(props: Props) => (
  <surfaceContext.Provider value={undefined} {...props} />
);

/**
 * Allows to integrate the component with surface context by creating component props default values from context using provided mapping.
 * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.
 * @param contextToProps maps current context into default component properties.
 * @param propsToInnerContext maps final component props into context that can be provided for component children.
 * @param defaultProps component default props when context is not provided
 **/
export const createUseSurfaceHook = <P,>(
  contextToProps: (context: SurfaceContext) => Required<P>,
  propsToInnerContext: (props: Required<P>) => SurfaceContext,
  defaultProps: Required<P>,
) => ({
  useSurface: (props: P) => {
    const surfaceContext = useSurfaceContext();

    const componentProps = defaults(
      {},
      props,
      surfaceContext ? contextToProps(surfaceContext) : defaultProps,
    );
    const innerContextProps = propsToInnerContext(componentProps);

    return { componentProps, innerContextProps };
  },
});
