import { defaults } from 'lodash';
import React, {
  createContext,
  FC,
  ReactNode,
  useContext,
  useMemo,
} from 'react';

import { FoundationContext } from './types';

const foundationContext = createContext<FoundationContext | undefined>(
  undefined,
);

export const FoundationContextProvider: FC<
  FoundationContext & { children?: ReactNode | Array<ReactNode> }
> = ({ size, children }) => {
  const contextValue = useMemo<FoundationContext>(
    () => ({
      size,
    }),
    [size],
  );
  return (
    <foundationContext.Provider value={contextValue}>
      {children}
    </foundationContext.Provider>
  );
};

export const useFoundationContext = () => useContext(foundationContext);

/* eslint-disable max-len,@typescript-eslint/comma-dangle */

/**
 * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults
 */
export const FoundationContextReset = <Props,>(props: Props) => (
  <foundationContext.Provider value={undefined} {...props} />
);

/**
 * Allows to integrate the component with foundation context by creating component props default values from context using provided mapping.
 * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.
 * @param contextToProps maps current context into default component properties.
 * @param propsToInnerContext maps final component props into context that can be provided for component children.
 * @param defaultProps component default props when context is not provided
 **/
export const createUseFoundationHook = <P,>(
  contextToProps: (context: FoundationContext) => Required<P>,
  propsToInnerContext: (props: Required<P>) => FoundationContext,
  defaultProps: Required<P>,
) => ({
  useFoundation: (props: P) => {
    const foundationContext = useFoundationContext();
    const componentProps = defaults(
      {},
      props,
      foundationContext ? contextToProps(foundationContext) : defaultProps,
    );
    const innerContextProps = propsToInnerContext(componentProps);

    return { componentProps, innerContextProps };
  },
});
