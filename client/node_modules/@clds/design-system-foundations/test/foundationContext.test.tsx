import { renderHook } from '@testing-library/react-hooks';
import { expect } from 'chai';
import React from 'react';

import {
  createUseFoundationHook,
  FoundationContextProvider,
  FoundationContextReset,
} from '../src/foundationContext';

type ComponentSize = 'small' | 'normal' | 'large';

const { useFoundation } = createUseFoundationHook<{ size?: ComponentSize }>(
  ({ size }) => ({
    size: ['xxs', 'xs', 'sm'].includes(size) ? 'small' : 'normal',
  }),
  ({ size }) => ({
    size: size === 'normal' ? 'md' : size === 'large' ? 'xxl' : 'sm',
  }),
  { size: 'large' },
);

describe('foundationContext', () => {
  describe('useFoundation', () => {
    it('should return context props when no props provided - example 1', () => {
      const { result } = renderHook(useFoundation, {
        wrapper: (props) => <FoundationContextProvider {...props} size="xs" />,
      });

      expect(result.current.componentProps).to.deep.equal({ size: 'small' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'sm' });
    });

    it('should return context props when no props provided - example 2', () => {
      const { result } = renderHook(useFoundation, {
        wrapper: (props) => <FoundationContextProvider {...props} size="xl" />,
      });

      expect(result.current.componentProps).to.deep.equal({ size: 'normal' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'md' });
    });

    it('should return default props when no props provided and no context', () => {
      const { result } = renderHook(useFoundation);

      expect(result.current.componentProps).to.deep.equal({ size: 'large' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'xxl' });
    });

    it('should return props if they are provided - example 1', () => {
      const { result } = renderHook(useFoundation, {
        wrapper: (props) => <FoundationContextProvider {...props} size="xs" />,
        initialProps: { size: 'normal' },
      });

      expect(result.current.componentProps).to.deep.equal({ size: 'normal' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'md' });
    });

    it('should return props if they are provided - example 2', () => {
      const { result } = renderHook(useFoundation, {
        wrapper: (props) => <FoundationContextProvider {...props} size="lg" />,
        initialProps: { size: 'small' },
      });

      expect(result.current.componentProps).to.deep.equal({ size: 'small' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'sm' });
    });

    it('should default when undefined provided', () => {
      const { result } = renderHook(useFoundation, {
        wrapper: (props) => <FoundationContextProvider {...props} size="lg" />,
        initialProps: { size: undefined },
      });

      expect(result.current.componentProps).to.deep.equal({ size: 'normal' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'md' });
    });
  });
  describe('FoundationContextReset', () => {
    it('should not return context props when reset is provided', () => {
      const { result } = renderHook(useFoundation, {
        wrapper: (props) => (
          <FoundationContextProvider size="xs">
            <FoundationContextReset {...props} />
          </FoundationContextProvider>
        ),
      });

      expect(result.current.componentProps).to.deep.equal({ size: 'large' });
      expect(result.current.innerContextProps).to.deep.equal({ size: 'xxl' });
    });
  });
});
