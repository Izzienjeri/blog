import { renderHook } from '@testing-library/react-hooks';
import { expect } from 'chai';
import React from 'react';

import {
  createUseSurfaceHook,
  SurfaceContextProvider,
  SurfaceContextReset,
} from '../src/surfaceContext';
import { Variant } from '../src/types';

type ComponentTone = 'plain' | 'surface' | 'solid';

const { useSurface } = createUseSurfaceHook<{
  tone?: ComponentTone;
  variant?: Variant;
}>(
  ({ tone, variant }) => ({
    tone: tone === 'solid' ? 'solid' : 'plain',
    variant,
  }),
  ({ tone, variant }) => ({
    variant,
    tone: tone === 'solid' ? 'solid' : 'subtle',
  }),
  { variant: 'warning', tone: 'surface' },
);

describe('surfaceContext', () => {
  describe('useSurface', () => {
    it('should return context props when no props provided', () => {
      const { result } = renderHook(useSurface, {
        wrapper: (props) => (
          <SurfaceContextProvider
            {...props}
            variant="secondary"
            tone="subtle"
          />
        ),
      });

      expect(result.current.componentProps).to.deep.equal({
        variant: 'secondary',
        tone: 'plain',
      });
      expect(result.current.innerContextProps).to.deep.equal({
        variant: 'secondary',
        tone: 'subtle',
      });
    });

    it('should return default props when no props provided and no context', () => {
      const { result } = renderHook(useSurface);

      expect(result.current.componentProps).to.deep.equal({
        variant: 'warning',
        tone: 'surface',
      });
      expect(result.current.innerContextProps).to.deep.equal({
        variant: 'warning',
        tone: 'subtle',
      });
    });

    it('should return props if they are provided - example 1', () => {
      const { result } = renderHook(useSurface, {
        wrapper: (props) => (
          <SurfaceContextProvider
            {...props}
            variant="secondary"
            tone="subtle"
          />
        ),
        initialProps: { variant: 'primary', tone: 'surface' },
      });

      expect(result.current.componentProps).to.deep.equal({
        variant: 'primary',
        tone: 'surface',
      });
      expect(result.current.innerContextProps).to.deep.equal({
        variant: 'primary',
        tone: 'subtle',
      });
    });

    it('should return props if they are provided - example 2', () => {
      const { result } = renderHook(useSurface, {
        wrapper: (props) => (
          <SurfaceContextProvider
            {...props}
            variant="secondary"
            tone="subtle"
          />
        ),
        initialProps: { tone: 'solid' },
      });

      expect(result.current.componentProps).to.deep.equal({
        variant: 'secondary',
        tone: 'solid',
      });
      expect(result.current.innerContextProps).to.deep.equal({
        variant: 'secondary',
        tone: 'solid',
      });
    });

    it('should default when undefined provided', () => {
      const { result } = renderHook(useSurface, {
        wrapper: (props) => (
          <SurfaceContextProvider
            {...props}
            variant="secondary"
            tone="subtle"
          />
        ),
        initialProps: { tone: undefined, variant: undefined },
      });

      expect(result.current.componentProps).to.deep.equal({
        variant: 'secondary',
        tone: 'plain',
      });
      expect(result.current.innerContextProps).to.deep.equal({
        variant: 'secondary',
        tone: 'subtle',
      });
    });
  });
  describe('SurfaceContextReset', () => {
    it('should not return  props if they are provided - example 1', () => {
      const { result } = renderHook(useSurface, {
        wrapper: (props) => (
          <SurfaceContextProvider variant="secondary" tone="subtle">
            <SurfaceContextReset {...props} />
          </SurfaceContextProvider>
        ),
      });

      expect(result.current.componentProps).to.deep.equal({
        variant: 'warning',
        tone: 'surface',
      });
      expect(result.current.innerContextProps).to.deep.equal({
        variant: 'warning',
        tone: 'subtle',
      });
    });
  });
});
