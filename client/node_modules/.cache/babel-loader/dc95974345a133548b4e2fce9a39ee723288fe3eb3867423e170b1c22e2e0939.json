{"ast":null,"code":"import { css } from 'styled-components';\nimport { appsTheme, getTypographyRuleMixins } from '@clds/typography';\nimport { blenderBackground, blenderForeground, getBlenderTypographyType } from './blender';\nconst prefix = '--ds-foundations';\nconst typography = `${prefix}--typography`;\nconst variables = {\n  typographyColor: `${typography}--color`,\n  typographyFontWeight: `${typography}--font-weight`,\n  backgroundColor: `${prefix}--background-color`,\n  foregroundColor: `${prefix}--foreground-color`\n};\nconst populateVariables = props => componentProps => {\n  const backgroundColor = blenderBackground(Object.assign(Object.assign({}, props), componentProps));\n  const foregroundColor = blenderForeground(Object.assign(Object.assign({}, props), componentProps));\n  const typographyType = getBlenderTypographyType(props.mode, props.variant);\n  const exampleTypographyRuleMixins = getTypographyRuleMixins('xs', typographyType);\n  return css`\n      ${variables.backgroundColor}: ${backgroundColor};\n      ${variables.foregroundColor}: ${foregroundColor};\n      ${variables.typographyColor}: ${exampleTypographyRuleMixins.color};\n      ${variables.typographyFontWeight}: ${exampleTypographyRuleMixins.fontWeight};\n    `;\n};\nconst typographyFromCssVariables = size => css`\n  font-size: ${appsTheme[size].size};\n  line-height: ${appsTheme[size].lineHeight};\n  color: var(${variables.typographyColor});\n  font-weight: var(${variables.typographyFontWeight});\n`;\nconst backgroundFromCssVariables = `var(${variables.backgroundColor})`;\nconst foregroundFromCssVariables = `var(${variables.foregroundColor})`;\nexport const blenderCss = {\n  variables,\n  populateVariables,\n  typographyFromCssVariables,\n  backgroundFromCssVariables,\n  foregroundFromCssVariables\n};","map":{"version":3,"names":["css","appsTheme","getTypographyRuleMixins","blenderBackground","blenderForeground","getBlenderTypographyType","prefix","typography","variables","typographyColor","typographyFontWeight","backgroundColor","foregroundColor","populateVariables","props","componentProps","Object","assign","typographyType","mode","variant","exampleTypographyRuleMixins","color","fontWeight","typographyFromCssVariables","size","lineHeight","backgroundFromCssVariables","foregroundFromCssVariables","blenderCss"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/blender/src/blenderCss.tsx"],"sourcesContent":["import { css } from 'styled-components';\n\nimport { GlobalTheme } from '@clds/component-theme';\nimport {\n  appsTheme,\n  getTypographyRuleMixins,\n  TypographySize,\n} from '@clds/typography';\n\nimport {\n  blenderBackground,\n  blenderForeground,\n  getBlenderTypographyType,\n} from './blender';\nimport { BlenderProps } from './BlenderProps';\n\nconst prefix = '--ds-foundations' as const;\nconst typography = `${prefix}--typography` as const;\n\nconst variables = {\n  typographyColor: `${typography}--color` as const,\n  typographyFontWeight: `${typography}--font-weight` as const,\n  backgroundColor: `${prefix}--background-color` as const,\n  foregroundColor: `${prefix}--foreground-color` as const,\n};\n\nconst populateVariables =\n  (props: BlenderProps) => (componentProps: { theme: GlobalTheme }) => {\n    const backgroundColor = blenderBackground({ ...props, ...componentProps });\n    const foregroundColor = blenderForeground({ ...props, ...componentProps });\n    const typographyType = getBlenderTypographyType(props.mode, props.variant);\n\n    const exampleTypographyRuleMixins = getTypographyRuleMixins(\n      'xs',\n      typographyType,\n    );\n\n    return css`\n      ${variables.backgroundColor}: ${backgroundColor};\n      ${variables.foregroundColor}: ${foregroundColor};\n      ${variables.typographyColor}: ${exampleTypographyRuleMixins.color};\n      ${variables.typographyFontWeight}: ${exampleTypographyRuleMixins.fontWeight};\n    `;\n  };\n\nconst typographyFromCssVariables = (size: TypographySize) => css`\n  font-size: ${appsTheme[size].size};\n  line-height: ${appsTheme[size].lineHeight};\n  color: var(${variables.typographyColor});\n  font-weight: var(${variables.typographyFontWeight});\n`;\n\nconst backgroundFromCssVariables = `var(${variables.backgroundColor})`;\nconst foregroundFromCssVariables = `var(${variables.foregroundColor})`;\n\nexport const blenderCss = {\n  variables,\n  populateVariables,\n  typographyFromCssVariables,\n  backgroundFromCssVariables,\n  foregroundFromCssVariables,\n};\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,mBAAmB;AAGvC,SACEC,SAAS,EACTC,uBAAuB,QAElB,kBAAkB;AAEzB,SACEC,iBAAiB,EACjBC,iBAAiB,EACjBC,wBAAwB,QACnB,WAAW;AAGlB,MAAMC,MAAM,GAAG,kBAA2B;AAC1C,MAAMC,UAAU,GAAG,GAAGD,MAAM,cAAuB;AAEnD,MAAME,SAAS,GAAG;EAChBC,eAAe,EAAE,GAAGF,UAAU,SAAkB;EAChDG,oBAAoB,EAAE,GAAGH,UAAU,eAAwB;EAC3DI,eAAe,EAAE,GAAGL,MAAM,oBAA6B;EACvDM,eAAe,EAAE,GAAGN,MAAM;CAC3B;AAED,MAAMO,iBAAiB,GACpBC,KAAmB,IAAMC,cAAsC,IAAI;EAClE,MAAMJ,eAAe,GAAGR,iBAAiB,CAAAa,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMH,KAAK,GAAKC,cAAc,EAAG;EAC1E,MAAMH,eAAe,GAAGR,iBAAiB,CAAAY,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMH,KAAK,GAAKC,cAAc,EAAG;EAC1E,MAAMG,cAAc,GAAGb,wBAAwB,CAACS,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,OAAO,CAAC;EAE1E,MAAMC,2BAA2B,GAAGnB,uBAAuB,CACzD,IAAI,EACJgB,cAAc,CACf;EAED,OAAOlB,GAAG;QACNQ,SAAS,CAACG,eAAe,KAAKA,eAAe;QAC7CH,SAAS,CAACI,eAAe,KAAKA,eAAe;QAC7CJ,SAAS,CAACC,eAAe,KAAKY,2BAA2B,CAACC,KAAK;QAC/Dd,SAAS,CAACE,oBAAoB,KAAKW,2BAA2B,CAACE,UAAU;KAC5E;AACH,CAAC;AAEH,MAAMC,0BAA0B,GAAIC,IAAoB,IAAKzB,GAAG;eACjDC,SAAS,CAACwB,IAAI,CAAC,CAACA,IAAI;iBAClBxB,SAAS,CAACwB,IAAI,CAAC,CAACC,UAAU;eAC5BlB,SAAS,CAACC,eAAe;qBACnBD,SAAS,CAACE,oBAAoB;CAClD;AAED,MAAMiB,0BAA0B,GAAG,OAAOnB,SAAS,CAACG,eAAe,GAAG;AACtE,MAAMiB,0BAA0B,GAAG,OAAOpB,SAAS,CAACI,eAAe,GAAG;AAEtE,OAAO,MAAMiB,UAAU,GAAG;EACxBrB,SAAS;EACTK,iBAAiB;EACjBW,0BAA0B;EAC1BG,0BAA0B;EAC1BC;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}