{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unsafe-return,\n   @typescript-eslint/no-unsafe-call,\n   @typescript-eslint/no-unsafe-member-access,\n   no-unused-vars\n*/\nimport { get } from 'lodash';\nimport { themeNotFoundMessage } from './themeNotFoundMessage';\nimport { mapTree } from '../tree/mapTree';\nimport { resolveValue } from '../utils/resolveValue';\nexport const idField = Symbol();\nconst createThemePrecompile = (id, node) => {\n  const cache = new WeakMap();\n  const compileTheme = theme => mapTree(node, (node, leafPath) => resolveValue(id, node, leafPath, {\n    theme\n  }));\n  return {\n    getCompiledTheme: theme => {\n      if (cache.has(theme)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return cache.get(theme);\n      }\n      const compiledTheme = compileTheme(theme);\n      cache.set(theme, compiledTheme);\n      return compiledTheme;\n    }\n  };\n};\nexport const createTheme = (definition, id = Symbol('unique id of component theme')) => {\n  const precompiledThemes = createThemePrecompile(id, definition);\n  const createMixinForNode = (node, currentPath) => props => {\n    if (props.theme === undefined) {\n      throw new Error(themeNotFoundMessage);\n    }\n    const compiledTheme = precompiledThemes.getCompiledTheme(props.theme);\n    return currentPath === '' ? compiledTheme : get(compiledTheme, currentPath);\n  };\n  const mixinTree = mapTree(definition, createMixinForNode, undefined, true, currentPath => ({\n    toString: () => `mixins.${currentPath}`\n  }));\n  mixinTree[idField] = id;\n  mixinTree.toString = () => JSON.stringify(definition, (key, value) => typeof value === 'function' ? value.toString() : value, ' ');\n  return mixinTree;\n};\nexport const overrideTheme = (theme, override) => ({\n  [theme[idField]]: override\n});","map":{"version":3,"names":["get","themeNotFoundMessage","mapTree","resolveValue","idField","Symbol","createThemePrecompile","id","node","cache","WeakMap","compileTheme","theme","leafPath","getCompiledTheme","has","compiledTheme","set","createTheme","definition","precompiledThemes","createMixinForNode","currentPath","props","undefined","Error","mixinTree","toString","JSON","stringify","key","value","overrideTheme","override"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/component-theme/src/api/createTheme.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-return,\n   @typescript-eslint/no-unsafe-call,\n   @typescript-eslint/no-unsafe-member-access,\n   no-unused-vars\n*/\nimport { get } from 'lodash';\n\nimport defaultTheme from '@clds/themes';\n\nimport {\n  MappedNode,\n  MixinToReturnValue,\n  NodeToMixinMapper,\n  Override,\n} from './createTheme.types';\nimport { themeNotFoundMessage } from './themeNotFoundMessage';\nimport { mapTree } from '../tree/mapTree';\nimport { Leaf, Node, ThemeId, ThemeWithOverrides } from '../types';\nimport { resolveValue } from '../utils/resolveValue';\n\nexport const idField = Symbol();\n\ntype InternalThemeApi = {\n  [id in typeof idField]: ThemeId;\n};\n\nconst createThemePrecompile = <NodeType extends Node>(\n  id: ThemeId,\n  node: NodeType,\n) => {\n  type ThemeType = ThemeWithOverrides;\n  const cache = new WeakMap<ThemeWithOverrides, MixinToReturnValue<NodeType>>();\n\n  const compileTheme = (theme: ThemeType) =>\n    mapTree(node, (node, leafPath) =>\n      resolveValue(id, node as Leaf, leafPath, { theme }),\n    );\n\n  return {\n    getCompiledTheme: (theme: ThemeType) => {\n      if (cache.has(theme)) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return cache.get(theme)!;\n      }\n      const compiledTheme = compileTheme(theme);\n      cache.set(\n        theme,\n        compiledTheme as unknown as MixinToReturnValue<NodeType>,\n      );\n      return compiledTheme;\n    },\n  };\n};\n\nexport const createTheme = <T extends Node, D = typeof defaultTheme>(\n  definition: T,\n  id: ThemeId = Symbol('unique id of component theme'),\n): MappedNode<T> & InternalThemeApi => {\n  const precompiledThemes = createThemePrecompile(id, definition);\n\n  const createMixinForNode: NodeToMixinMapper =\n    (node, currentPath) => (props) => {\n      if (props.theme === undefined) {\n        throw new Error(themeNotFoundMessage);\n      }\n      const compiledTheme = precompiledThemes.getCompiledTheme(props.theme);\n\n      return currentPath === ''\n        ? compiledTheme\n        : get(compiledTheme, currentPath);\n    };\n\n  const mixinTree = mapTree(\n    definition,\n    createMixinForNode,\n    undefined,\n    true,\n    (currentPath) => ({\n      toString: () => `mixins.${currentPath}`,\n    }),\n  ) as MappedNode<T> & InternalThemeApi;\n\n  mixinTree[idField] = id;\n  mixinTree.toString = () =>\n    JSON.stringify(\n      definition,\n      (key, value) => (typeof value === 'function' ? value.toString() : value),\n      ' ',\n    );\n\n  return mixinTree;\n};\n\nexport const overrideTheme = <T extends Node>(\n  theme: MappedNode<T>,\n  override: Override<T>,\n) => ({\n  [(theme as unknown as InternalThemeApi)[idField]]: override,\n});\n"],"mappings":"AAAA;;;;;AAKA,SAASA,GAAG,QAAQ,QAAQ;AAU5B,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,SAASC,YAAY,QAAQ,uBAAuB;AAEpD,OAAO,MAAMC,OAAO,GAAGC,MAAM,EAAE;AAM/B,MAAMC,qBAAqB,GAAGA,CAC5BC,EAAW,EACXC,IAAc,KACZ;EAEF,MAAMC,KAAK,GAAG,IAAIC,OAAO,EAAoD;EAE7E,MAAMC,YAAY,GAAIC,KAAgB,IACpCV,OAAO,CAACM,IAAI,EAAE,CAACA,IAAI,EAAEK,QAAQ,KAC3BV,YAAY,CAACI,EAAE,EAAEC,IAAY,EAAEK,QAAQ,EAAE;IAAED;EAAK,CAAE,CAAC,CACpD;EAEH,OAAO;IACLE,gBAAgB,EAAGF,KAAgB,IAAI;MACrC,IAAIH,KAAK,CAACM,GAAG,CAACH,KAAK,CAAC,EAAE;QACpB;QACA,OAAOH,KAAK,CAACT,GAAG,CAACY,KAAK,CAAE;;MAE1B,MAAMI,aAAa,GAAGL,YAAY,CAACC,KAAK,CAAC;MACzCH,KAAK,CAACQ,GAAG,CACPL,KAAK,EACLI,aAAwD,CACzD;MACD,OAAOA,aAAa;IACtB;GACD;AACH,CAAC;AAED,OAAO,MAAME,WAAW,GAAGA,CACzBC,UAAa,EACbZ,EAAA,GAAcF,MAAM,CAAC,8BAA8B,CAAC,KAChB;EACpC,MAAMe,iBAAiB,GAAGd,qBAAqB,CAACC,EAAE,EAAEY,UAAU,CAAC;EAE/D,MAAME,kBAAkB,GACtBA,CAACb,IAAI,EAAEc,WAAW,KAAMC,KAAK,IAAI;IAC/B,IAAIA,KAAK,CAACX,KAAK,KAAKY,SAAS,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAACxB,oBAAoB,CAAC;;IAEvC,MAAMe,aAAa,GAAGI,iBAAiB,CAACN,gBAAgB,CAACS,KAAK,CAACX,KAAK,CAAC;IAErE,OAAOU,WAAW,KAAK,EAAE,GACrBN,aAAa,GACbhB,GAAG,CAACgB,aAAa,EAAEM,WAAW,CAAC;EACrC,CAAC;EAEH,MAAMI,SAAS,GAAGxB,OAAO,CACvBiB,UAAU,EACVE,kBAAkB,EAClBG,SAAS,EACT,IAAI,EACHF,WAAW,KAAM;IAChBK,QAAQ,EAAEA,CAAA,KAAM,UAAUL,WAAW;GACtC,CAAC,CACiC;EAErCI,SAAS,CAACtB,OAAO,CAAC,GAAGG,EAAE;EACvBmB,SAAS,CAACC,QAAQ,GAAG,MACnBC,IAAI,CAACC,SAAS,CACZV,UAAU,EACV,CAACW,GAAG,EAAEC,KAAK,KAAM,OAAOA,KAAK,KAAK,UAAU,GAAGA,KAAK,CAACJ,QAAQ,EAAE,GAAGI,KAAM,EACxE,GAAG,CACJ;EAEH,OAAOL,SAAS;AAClB,CAAC;AAED,OAAO,MAAMM,aAAa,GAAGA,CAC3BpB,KAAoB,EACpBqB,QAAqB,MACjB;EACJ,CAAErB,KAAqC,CAACR,OAAO,CAAC,GAAG6B;CACpD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}