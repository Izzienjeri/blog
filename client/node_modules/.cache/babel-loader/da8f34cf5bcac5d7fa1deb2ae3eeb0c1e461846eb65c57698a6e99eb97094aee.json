{"ast":null,"code":"var _jsxFileName = \"/home/angela/Development/code/flask/blog_app_project/client/src/components/AddCategory.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddCategory = ({\n  setCategories,\n  categories\n}) => {\n  _s();\n  const [newCategory, setNewCategory] = useState(\"\");\n  const [newCategoryDesc, setNewCategoryDesc] = useState(\"\");\n  const addCategory = e => {\n    e.preventDefault();\n    if (newCategory && newCategoryDesc) {\n      const formData = new FormData();\n      formData.set(\"new_category\", newCategory);\n      formData.set(\"description\", newCategoryDesc);\n      fetch(\"/categories\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + retrieve().access_token\n        },\n        body: JSON.stringify(formData)\n      }).then(resp => resp.json()).then(data => {\n        setCategories([...categories, data]); // Use spread operator here\n        setNewCategory(\"\"); // Clear input values after successful submission\n        setNewCategoryDesc(\"\");\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      if (!newCategory) {\n        alert(\"Category title is required\");\n      } else if (!newCategoryDesc) {\n        alert(\"Category description is required\");\n      } else {\n        alert(\"Category title and description are required\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AddCategory, \"P6FMFPb4sbrXWxKIi46T+lu1IaI=\");\n_c = AddCategory;\nvar _c;\n$RefreshReg$(_c, \"AddCategory\");","map":{"version":3,"names":["AddCategory","setCategories","categories","_s","newCategory","setNewCategory","useState","newCategoryDesc","setNewCategoryDesc","addCategory","e","preventDefault","formData","FormData","set","fetch","method","headers","Authorization","retrieve","access_token","body","JSON","stringify","then","resp","json","data","catch","error","console","log","alert","_jsxDEV","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/src/components/AddCategory.js"],"sourcesContent":["const AddCategory = ({ setCategories, categories }) => {\n  const [newCategory, setNewCategory] = useState(\"\");\n  const [newCategoryDesc, setNewCategoryDesc] = useState(\"\");\n\n  const addCategory = (e) => {\n    e.preventDefault();\n\n    if (newCategory && newCategoryDesc) {\n      const formData = new FormData();\n      formData.set(\"new_category\", newCategory);\n      formData.set(\"description\", newCategoryDesc);\n\n      fetch(\"/categories\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + retrieve().access_token,\n        },\n        body: JSON.stringify(formData),\n      })\n        .then((resp) => resp.json())\n        .then((data) => {\n          setCategories([...categories, data]); // Use spread operator here\n          setNewCategory(\"\"); // Clear input values after successful submission\n          setNewCategoryDesc(\"\");\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else {\n      if (!newCategory) {\n        alert(\"Category title is required\");\n      } else if (!newCategoryDesc) {\n        alert(\"Category description is required\");\n      } else {\n        alert(\"Category title and description are required\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={addCategory}>\n        {/* Rest of your code */}\n      </form>\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,MAAMA,WAAW,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMG,WAAW,GAAIC,CAAC,IAAK;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIP,WAAW,IAAIG,eAAe,EAAE;MAClC,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,GAAG,CAAC,cAAc,EAAEV,WAAW,CAAC;MACzCQ,QAAQ,CAACE,GAAG,CAAC,aAAa,EAAEP,eAAe,CAAC;MAE5CQ,KAAK,CAAC,aAAa,EAAE;QACnBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,SAAS,GAAGC,QAAQ,CAAC,CAAC,CAACC;QACxC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ;MAC/B,CAAC,CAAC,CACCY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BF,IAAI,CAAEG,IAAI,IAAK;QACd1B,aAAa,CAAC,CAAC,GAAGC,UAAU,EAAEyB,IAAI,CAAC,CAAC,CAAC,CAAC;QACtCtB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;QACpBG,kBAAkB,CAAC,EAAE,CAAC;MACxB,CAAC,CAAC,CACDoB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,MAAM;MACL,IAAI,CAACzB,WAAW,EAAE;QAChB4B,KAAK,CAAC,4BAA4B,CAAC;MACrC,CAAC,MAAM,IAAI,CAACzB,eAAe,EAAE;QAC3ByB,KAAK,CAAC,kCAAkC,CAAC;MAC3C,CAAC,MAAM;QACLA,KAAK,CAAC,6CAA6C,CAAC;MACtD;IACF;EACF,CAAC;EAED,oBACEC,OAAA;IAAAC,QAAA,eACED,OAAA;MAAME,QAAQ,EAAE1B;IAAY;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACpC,EAAA,CA/CIH,WAAW;AAAAwC,EAAA,GAAXxC,WAAW;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}