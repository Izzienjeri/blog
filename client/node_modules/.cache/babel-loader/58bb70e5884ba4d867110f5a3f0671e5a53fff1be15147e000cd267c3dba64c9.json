{"ast":null,"code":"import { defaults } from 'lodash';\nimport React, { createContext, useContext, useMemo } from 'react';\nconst foundationContext = createContext(undefined);\nexport const FoundationContextProvider = ({\n  size,\n  children\n}) => {\n  const contextValue = useMemo(() => ({\n    size\n  }), [size]);\n  return React.createElement(foundationContext.Provider, {\n    value: contextValue\n  }, children);\n};\nexport const useFoundationContext = () => useContext(foundationContext);\n/* eslint-disable max-len,@typescript-eslint/comma-dangle */\n/**\n * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults\n */\nexport const FoundationContextReset = props => React.createElement(foundationContext.Provider, Object.assign({\n  value: undefined\n}, props));\n/**\n * Allows to integrate the component with foundation context by creating component props default values from context using provided mapping.\n * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.\n * @param contextToProps maps current context into default component properties.\n * @param propsToInnerContext maps final component props into context that can be provided for component children.\n * @param defaultProps component default props when context is not provided\n **/\nexport const createUseFoundationHook = (contextToProps, propsToInnerContext, defaultProps) => ({\n  useFoundation: props => {\n    const foundationContext = useFoundationContext();\n    const componentProps = defaults({}, props, foundationContext ? contextToProps(foundationContext) : defaultProps);\n    const innerContextProps = propsToInnerContext(componentProps);\n    return {\n      componentProps,\n      innerContextProps\n    };\n  }\n});","map":{"version":3,"names":["defaults","React","createContext","useContext","useMemo","foundationContext","undefined","FoundationContextProvider","size","children","contextValue","createElement","Provider","value","useFoundationContext","FoundationContextReset","props","Object","assign","createUseFoundationHook","contextToProps","propsToInnerContext","defaultProps","useFoundation","componentProps","innerContextProps"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/design-system-foundations/src/foundationContext.tsx"],"sourcesContent":["import { defaults } from 'lodash';\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport { FoundationContext } from './types';\n\nconst foundationContext = createContext<FoundationContext | undefined>(\n  undefined,\n);\n\nexport const FoundationContextProvider: FC<\n  FoundationContext & { children?: ReactNode | Array<ReactNode> }\n> = ({ size, children }) => {\n  const contextValue = useMemo<FoundationContext>(\n    () => ({\n      size,\n    }),\n    [size],\n  );\n  return (\n    <foundationContext.Provider value={contextValue}>\n      {children}\n    </foundationContext.Provider>\n  );\n};\n\nexport const useFoundationContext = () => useContext(foundationContext);\n\n/* eslint-disable max-len,@typescript-eslint/comma-dangle */\n\n/**\n * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults\n */\nexport const FoundationContextReset = <Props,>(props: Props) => (\n  <foundationContext.Provider value={undefined} {...props} />\n);\n\n/**\n * Allows to integrate the component with foundation context by creating component props default values from context using provided mapping.\n * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.\n * @param contextToProps maps current context into default component properties.\n * @param propsToInnerContext maps final component props into context that can be provided for component children.\n * @param defaultProps component default props when context is not provided\n **/\nexport const createUseFoundationHook = <P,>(\n  contextToProps: (context: FoundationContext) => Required<P>,\n  propsToInnerContext: (props: Required<P>) => FoundationContext,\n  defaultProps: Required<P>,\n) => ({\n  useFoundation: (props: P) => {\n    const foundationContext = useFoundationContext();\n    const componentProps = defaults(\n      {},\n      props,\n      foundationContext ? contextToProps(foundationContext) : defaultProps,\n    );\n    const innerContextProps = propsToInnerContext(componentProps);\n\n    return { componentProps, innerContextProps };\n  },\n});\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;AACjC,OAAOC,KAAK,IACVC,aAAa,EAGbC,UAAU,EACVC,OAAO,QACF,OAAO;AAId,MAAMC,iBAAiB,GAAGH,aAAa,CACrCI,SAAS,CACV;AAED,OAAO,MAAMC,yBAAyB,GAElCA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAE,KAAI;EACzB,MAAMC,YAAY,GAAGN,OAAO,CAC1B,OAAO;IACLI;GACD,CAAC,EACF,CAACA,IAAI,CAAC,CACP;EACD,OACEP,KAAA,CAAAU,aAAA,CAACN,iBAAiB,CAACO,QAAQ;IAACC,KAAK,EAAEH;EAAY,GAC5CD,QAAQ,CACkB;AAEjC,CAAC;AAED,OAAO,MAAMK,oBAAoB,GAAGA,CAAA,KAAMX,UAAU,CAACE,iBAAiB,CAAC;AAEvE;AAEA;;;AAGA,OAAO,MAAMU,sBAAsB,GAAYC,KAAY,IACzDf,KAAA,CAAAU,aAAA,CAACN,iBAAiB,CAACO,QAAQ,EAAAK,MAAA,CAAAC,MAAA;EAACL,KAAK,EAAEP;AAAS,GAAMU,KAAK,EACxD;AAED;;;;;;;AAOA,OAAO,MAAMG,uBAAuB,GAAGA,CACrCC,cAA2D,EAC3DC,mBAA8D,EAC9DC,YAAyB,MACrB;EACJC,aAAa,EAAGP,KAAQ,IAAI;IAC1B,MAAMX,iBAAiB,GAAGS,oBAAoB,EAAE;IAChD,MAAMU,cAAc,GAAGxB,QAAQ,CAC7B,EAAE,EACFgB,KAAK,EACLX,iBAAiB,GAAGe,cAAc,CAACf,iBAAiB,CAAC,GAAGiB,YAAY,CACrE;IACD,MAAMG,iBAAiB,GAAGJ,mBAAmB,CAACG,cAAc,CAAC;IAE7D,OAAO;MAAEA,cAAc;MAAEC;IAAiB,CAAE;EAC9C;CACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}