{"ast":null,"code":"export const createVariant = resolver => {\n  return calculator => props => {\n    const resolvedBranch = resolver(props)(props);\n    return calculator ? calculator(resolvedBranch, props) : resolvedBranch;\n  };\n};","map":{"version":3,"names":["createVariant","resolver","calculator","props","resolvedBranch"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/component-theme/src/api/createVariant.ts"],"sourcesContent":["/**\n * Utility similar to combineValues but it produces shorter syntax to compute style based on particular branch of theme,\n * based on props\n * const variant = const variant = createVariant((props: Props) => theme[props.shape][props.type]);\n * // then use in styled-components:\n * border-radius: ${variant(t => t.background)};\n *\n * Later we will add a compileVariant that will replace it with createVariant and also replace all\n * variant.foo.bar.baz with variant(t=>t.foo.bar.baz)\n *\n * @param resolver\n */\nimport { MixinFunction } from '../types';\n\nexport const createVariant = <ResolverType extends MixinFunction>(\n  resolver: ResolverType,\n) => {\n  type Props = Parameters<ResolverType>[0];\n  type Calculator<RetType, Props> = (\n    value: ReturnType<ReturnType<ResolverType>>,\n    props: Props,\n  ) => RetType;\n\n  return <R>(calculator?: Calculator<R, Props>) =>\n    (props: Props) => {\n      const resolvedBranch = resolver(props)(props);\n      return calculator ? calculator(resolvedBranch, props) : resolvedBranch;\n    };\n};\n"],"mappings":"AAcA,OAAO,MAAMA,aAAa,GACxBC,QAAsB,IACpB;EAOF,OAAWC,UAAiC,IACzCC,KAAY,IAAI;IACf,MAAMC,cAAc,GAAGH,QAAQ,CAACE,KAAK,CAAC,CAACA,KAAK,CAAC;IAC7C,OAAOD,UAAU,GAAGA,UAAU,CAACE,cAAc,EAAED,KAAK,CAAC,GAAGC,cAAc;EACxE,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}