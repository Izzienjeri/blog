{"ast":null,"code":"export function combineValues(...args) {\n  const functions = args.slice(0, -1);\n  const compute = args[args.length - 1];\n  return props => {\n    const values = functions.map(value => value(props));\n    return compute(...values, props);\n  };\n}","map":{"version":3,"names":["combineValues","args","functions","slice","compute","length","props","values","map","value"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/component-theme/src/api/combineValues.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\ntype ExtractReturnedValues<List extends Array<(...args: any) => any>> =\n  List extends [(...args: any) => infer Result, ...infer RemainingItems]\n    ? RemainingItems extends Array<(...args: any) => any>\n      ? [Result, ...ExtractReturnedValues<RemainingItems>]\n      : [Result]\n    : [];\n\nexport function combineValues<\n  Props,\n  Functions extends Array<((props: Props) => any) | ((...args: any) => any)>,\n  Resolver extends (\n    ...args: [...ExtractReturnedValues<Functions>, Props]\n  ) => any,\n>(...args: [...Functions, Resolver]): (props: Props) => ReturnType<Resolver> {\n  const functions = args.slice(0, -1) as Functions;\n  const compute = args[args.length - 1] as Resolver;\n  return (props: Props) => {\n    const values = functions.map((value) =>\n      value(props),\n    ) as ExtractReturnedValues<Functions>;\n    return compute(...values, props);\n  };\n}\n"],"mappings":"AAQA,OAAM,SAAUA,aAAaA,CAM3B,GAAGC,IAA8B;EACjC,MAAMC,SAAS,GAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAc;EAChD,MAAMC,OAAO,GAAGH,IAAI,CAACA,IAAI,CAACI,MAAM,GAAG,CAAC,CAAa;EACjD,OAAQC,KAAY,IAAI;IACtB,MAAMC,MAAM,GAAGL,SAAS,CAACM,GAAG,CAAEC,KAAK,IACjCA,KAAK,CAACH,KAAK,CAAC,CACuB;IACrC,OAAOF,OAAO,CAAC,GAAGG,MAAM,EAAED,KAAK,CAAC;EAClC,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}