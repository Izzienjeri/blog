{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { get } from 'lodash';\nimport { globalThemeId } from './globalThemeId';\nimport { themeNotFoundMessage } from '../api/themeNotFoundMessage';\nconst findOverride = (props, id, path) => {\n  var _a;\n  if (id === globalThemeId) {\n    // global mixins are overridden at theme root\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n    return get(props.theme, path);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!props.theme) {\n    throw new Error(themeNotFoundMessage);\n  }\n  // global mixins are overridden at theme.components.*\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n  return ((_a = props.theme.components) === null || _a === void 0 ? void 0 : _a[id]) && get(props.theme.components[id], path);\n};\n/**\n * For component of given ID and given theme definition leaf node, resolve the final css value.\n * @param id theme internal id, needed to find an override in theme context\n * @param leaf leaf node of theme definition three. It can be a primitive value or other mixin\n * (ex. mixins.palette.primary) or string reference (ex. 'palette.primary')\n * @param path path of node relative to theme definition root (ex. pill.primary.button.background.color)\n * @param props value of properties from a styled component, including theme tree value\n */\nexport const resolveValue = (id, leaf, path, props) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const override = findOverride(props, id, path);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const reference = override !== null && override !== void 0 ? override : leaf;\n  if (typeof reference === 'function') {\n    // reference to other mixin, just call it\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return\n    return reference(props);\n  }\n  // primitive value or old-school string path reference to global theme\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n  return get(props.theme, reference, reference); // we still support string based mixins, we need to try to lookup them\n};","map":{"version":3,"names":["get","globalThemeId","themeNotFoundMessage","findOverride","props","id","path","theme","Error","_a","components","resolveValue","leaf","override","reference"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/component-theme/src/utils/resolveValue.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { get } from 'lodash';\n\nimport { globalThemeId } from './globalThemeId';\nimport { themeNotFoundMessage } from '../api/themeNotFoundMessage';\nimport { Leaf, MixinProps, ThemeId } from '../types';\n\nconst findOverride = (props: MixinProps<any>, id: ThemeId, path: string) => {\n  if (id === globalThemeId) {\n    // global mixins are overridden at theme root\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n    return get(props.theme, path);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!props.theme) {\n    throw new Error(themeNotFoundMessage);\n  }\n\n  // global mixins are overridden at theme.components.*\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n  return props.theme.components?.[id] && get(props.theme.components[id], path);\n};\n\n/**\n * For component of given ID and given theme definition leaf node, resolve the final css value.\n * @param id theme internal id, needed to find an override in theme context\n * @param leaf leaf node of theme definition three. It can be a primitive value or other mixin\n * (ex. mixins.palette.primary) or string reference (ex. 'palette.primary')\n * @param path path of node relative to theme definition root (ex. pill.primary.button.background.color)\n * @param props value of properties from a styled component, including theme tree value\n */\nexport const resolveValue = <Id extends ThemeId>(\n  id: Id,\n  leaf: Leaf,\n  path: string,\n  props: MixinProps<any, any>,\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const override = findOverride(props, id, path);\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const reference = override ?? leaf;\n\n  if (typeof reference === 'function') {\n    // reference to other mixin, just call it\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return\n    return reference(props);\n  }\n  // primitive value or old-school string path reference to global theme\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n  return get(props.theme, reference, reference); // we still support string based mixins, we need to try to lookup them\n};\n"],"mappings":"AAAA;AACA,SAASA,GAAG,QAAQ,QAAQ;AAE5B,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,oBAAoB,QAAQ,6BAA6B;AAGlE,MAAMC,YAAY,GAAGA,CAACC,KAAsB,EAAEC,EAAW,EAAEC,IAAY,KAAI;;EACzE,IAAID,EAAE,KAAKJ,aAAa,EAAE;IACxB;IACA;IACA,OAAOD,GAAG,CAACI,KAAK,CAACG,KAAK,EAAED,IAAI,CAAC;;EAG/B;EACA,IAAI,CAACF,KAAK,CAACG,KAAK,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACN,oBAAoB,CAAC;;EAGvC;EACA;EACA,OAAO,EAAAO,EAAA,GAAAL,KAAK,CAACG,KAAK,CAACG,UAAU,cAAAD,EAAA,uBAAAA,EAAA,CAAGJ,EAAE,CAAC,KAAIL,GAAG,CAACI,KAAK,CAACG,KAAK,CAACG,UAAU,CAACL,EAAE,CAAC,EAAEC,IAAI,CAAC;AAC9E,CAAC;AAED;;;;;;;;AAQA,OAAO,MAAMK,YAAY,GAAGA,CAC1BN,EAAM,EACNO,IAAU,EACVN,IAAY,EACZF,KAA2B,KACzB;EACF;EACA,MAAMS,QAAQ,GAAGV,YAAY,CAACC,KAAK,EAAEC,EAAE,EAAEC,IAAI,CAAC;EAE9C;EACA,MAAMQ,SAAS,GAAGD,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAID,IAAI;EAElC,IAAI,OAAOE,SAAS,KAAK,UAAU,EAAE;IACnC;IACA;IACA,OAAOA,SAAS,CAACV,KAAK,CAAC;;EAEzB;EACA;EACA,OAAOJ,GAAG,CAACI,KAAK,CAACG,KAAK,EAAEO,SAAS,EAAEA,SAAS,CAAC,CAAC,CAAC;AACjD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}