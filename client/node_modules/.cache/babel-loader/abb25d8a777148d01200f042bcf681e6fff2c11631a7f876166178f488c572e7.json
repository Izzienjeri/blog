{"ast":null,"code":"import { normal } from 'color-blend';\nimport { parseToRgb, rgba, rgbToColorString } from 'polished';\nimport { backgroundMapping, foregroundMapping } from './mapping';\nconst toColorBlendRgba = color => ({\n  r: color.red,\n  g: color.green,\n  b: color.blue,\n  a: 'alpha' in color ? color.alpha : 1\n});\nconst fromBlendToPolishedRgba = color => ({\n  red: color.r,\n  green: color.g,\n  blue: color.b,\n  alpha: color.a\n});\nconst toPolishedRgba = color => color === 'transparent' ? {\n  red: 255,\n  green: 255,\n  blue: 255,\n  alpha: 0\n} : parseToRgb(color);\nexport const resolveColor = (color, colors) => color === 'transparent' ? 'transparent' : colors[color];\nconst computeBlendColor = (blending, colors) => {\n  const baseColor = resolveColor(blending.baseColor, colors);\n  const blendColor = rgba(resolveColor(blending.blendColor, colors), blending.blendOpacity);\n  const blendBackdrop = toColorBlendRgba(toPolishedRgba(baseColor));\n  const blendSource = toColorBlendRgba(toPolishedRgba(blendColor));\n  return rgbToColorString(fromBlendToPolishedRgba(normal(blendBackdrop, blendSource)));\n};\nexport const getBackgroundBlendOptions = props => backgroundMapping[props.mode][props.variant][props.intensity];\nexport const getForegroundBlendOptions = props => foregroundMapping[props.mode][props.variant];\nexport const blenderBackground = props => computeBlendColor(getBackgroundBlendOptions(props), props.theme.palette);\nexport const blenderForeground = props => resolveColor(getForegroundBlendOptions(props).colorName, props.theme.palette);\nexport const getBlenderTypographyType = (mode, variant) => foregroundMapping[mode][variant].typography;","map":{"version":3,"names":["normal","parseToRgb","rgba","rgbToColorString","backgroundMapping","foregroundMapping","toColorBlendRgba","color","r","red","g","green","b","blue","a","alpha","fromBlendToPolishedRgba","toPolishedRgba","resolveColor","colors","computeBlendColor","blending","baseColor","blendColor","blendOpacity","blendBackdrop","blendSource","getBackgroundBlendOptions","props","mode","variant","intensity","getForegroundBlendOptions","blenderBackground","theme","palette","blenderForeground","colorName","getBlenderTypographyType","typography"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/blender/src/blender.ts"],"sourcesContent":["import { normal } from 'color-blend';\nimport { RGBA as ColorBlendRgba } from 'color-blend/dist/types';\nimport { parseToRgb, rgba, rgbToColorString } from 'polished';\nimport {\n  RgbaColor as PolishedRgba,\n  RgbColor as PolishedRgb,\n} from 'polished/lib/types/color';\n\nimport { GlobalTheme } from '@clds/component-theme';\n\nimport {\n  BlenderBackgroundProps,\n  BlenderForegroundProps,\n  BlendMode,\n  BlendVariant,\n} from './BlenderProps';\nimport {\n  BackgroundBlendOptions,\n  ColorName,\n  OpaqueColorName,\n} from './blendOptions';\nimport { backgroundMapping, foregroundMapping } from './mapping';\n\nconst toColorBlendRgba = (\n  color: PolishedRgba | PolishedRgb,\n): ColorBlendRgba => ({\n  r: color.red,\n  g: color.green,\n  b: color.blue,\n  a: 'alpha' in color ? color.alpha : 1,\n});\n\nconst fromBlendToPolishedRgba = (color: ColorBlendRgba): PolishedRgba => ({\n  red: color.r,\n  green: color.g,\n  blue: color.b,\n  alpha: color.a,\n});\n\nconst toPolishedRgba = (color: string): PolishedRgba | PolishedRgb =>\n  color === 'transparent'\n    ? { red: 255, green: 255, blue: 255, alpha: 0 }\n    : parseToRgb(color);\n\nexport const resolveColor = (\n  color: ColorName,\n  colors: Record<OpaqueColorName, string>,\n) => (color === 'transparent' ? 'transparent' : colors[color]);\n\nconst computeBlendColor = (\n  blending: BackgroundBlendOptions,\n  colors: Record<Exclude<ColorName, 'transparent'>, string>,\n) => {\n  const baseColor = resolveColor(blending.baseColor, colors);\n  const blendColor = rgba(\n    resolveColor(blending.blendColor, colors),\n    blending.blendOpacity,\n  );\n  const blendBackdrop = toColorBlendRgba(toPolishedRgba(baseColor));\n  const blendSource = toColorBlendRgba(toPolishedRgba(blendColor));\n\n  return rgbToColorString(\n    fromBlendToPolishedRgba(normal(blendBackdrop, blendSource)),\n  );\n};\n\nexport const getBackgroundBlendOptions = (props: BlenderBackgroundProps) =>\n  backgroundMapping[props.mode][props.variant][props.intensity];\n\nexport const getForegroundBlendOptions = (props: BlenderForegroundProps) =>\n  foregroundMapping[props.mode][props.variant];\n\nexport const blenderBackground = (\n  props: BlenderBackgroundProps & { theme: GlobalTheme },\n) => computeBlendColor(getBackgroundBlendOptions(props), props.theme.palette);\n\nexport const blenderForeground = (\n  props: BlenderForegroundProps & { theme: GlobalTheme },\n) =>\n  resolveColor(getForegroundBlendOptions(props).colorName, props.theme.palette);\n\nexport const getBlenderTypographyType = (\n  mode: BlendMode,\n  variant: BlendVariant,\n) => foregroundMapping[mode][variant].typography;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AAEpC,SAASC,UAAU,EAAEC,IAAI,EAAEC,gBAAgB,QAAQ,UAAU;AAmB7D,SAASC,iBAAiB,EAAEC,iBAAiB,QAAQ,WAAW;AAEhE,MAAMC,gBAAgB,GACpBC,KAAiC,KACb;EACpBC,CAAC,EAAED,KAAK,CAACE,GAAG;EACZC,CAAC,EAAEH,KAAK,CAACI,KAAK;EACdC,CAAC,EAAEL,KAAK,CAACM,IAAI;EACbC,CAAC,EAAE,OAAO,IAAIP,KAAK,GAAGA,KAAK,CAACQ,KAAK,GAAG;CACrC,CAAC;AAEF,MAAMC,uBAAuB,GAAIT,KAAqB,KAAoB;EACxEE,GAAG,EAAEF,KAAK,CAACC,CAAC;EACZG,KAAK,EAAEJ,KAAK,CAACG,CAAC;EACdG,IAAI,EAAEN,KAAK,CAACK,CAAC;EACbG,KAAK,EAAER,KAAK,CAACO;CACd,CAAC;AAEF,MAAMG,cAAc,GAAIV,KAAa,IACnCA,KAAK,KAAK,aAAa,GACnB;EAAEE,GAAG,EAAE,GAAG;EAAEE,KAAK,EAAE,GAAG;EAAEE,IAAI,EAAE,GAAG;EAAEE,KAAK,EAAE;AAAC,CAAE,GAC7Cd,UAAU,CAACM,KAAK,CAAC;AAEvB,OAAO,MAAMW,YAAY,GAAGA,CAC1BX,KAAgB,EAChBY,MAAuC,KACnCZ,KAAK,KAAK,aAAa,GAAG,aAAa,GAAGY,MAAM,CAACZ,KAAK,CAAE;AAE9D,MAAMa,iBAAiB,GAAGA,CACxBC,QAAgC,EAChCF,MAAyD,KACvD;EACF,MAAMG,SAAS,GAAGJ,YAAY,CAACG,QAAQ,CAACC,SAAS,EAAEH,MAAM,CAAC;EAC1D,MAAMI,UAAU,GAAGrB,IAAI,CACrBgB,YAAY,CAACG,QAAQ,CAACE,UAAU,EAAEJ,MAAM,CAAC,EACzCE,QAAQ,CAACG,YAAY,CACtB;EACD,MAAMC,aAAa,GAAGnB,gBAAgB,CAACW,cAAc,CAACK,SAAS,CAAC,CAAC;EACjE,MAAMI,WAAW,GAAGpB,gBAAgB,CAACW,cAAc,CAACM,UAAU,CAAC,CAAC;EAEhE,OAAOpB,gBAAgB,CACrBa,uBAAuB,CAAChB,MAAM,CAACyB,aAAa,EAAEC,WAAW,CAAC,CAAC,CAC5D;AACH,CAAC;AAED,OAAO,MAAMC,yBAAyB,GAAIC,KAA6B,IACrExB,iBAAiB,CAACwB,KAAK,CAACC,IAAI,CAAC,CAACD,KAAK,CAACE,OAAO,CAAC,CAACF,KAAK,CAACG,SAAS,CAAC;AAE/D,OAAO,MAAMC,yBAAyB,GAAIJ,KAA6B,IACrEvB,iBAAiB,CAACuB,KAAK,CAACC,IAAI,CAAC,CAACD,KAAK,CAACE,OAAO,CAAC;AAE9C,OAAO,MAAMG,iBAAiB,GAC5BL,KAAsD,IACnDR,iBAAiB,CAACO,yBAAyB,CAACC,KAAK,CAAC,EAAEA,KAAK,CAACM,KAAK,CAACC,OAAO,CAAC;AAE7E,OAAO,MAAMC,iBAAiB,GAC5BR,KAAsD,IAEtDV,YAAY,CAACc,yBAAyB,CAACJ,KAAK,CAAC,CAACS,SAAS,EAAET,KAAK,CAACM,KAAK,CAACC,OAAO,CAAC;AAE/E,OAAO,MAAMG,wBAAwB,GAAGA,CACtCT,IAAe,EACfC,OAAqB,KAClBzB,iBAAiB,CAACwB,IAAI,CAAC,CAACC,OAAO,CAAC,CAACS,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}