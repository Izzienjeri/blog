{"ast":null,"code":"import { defaults } from 'lodash';\nimport React, { createContext, useContext, useMemo } from 'react';\nconst surfaceContext = createContext(undefined);\nexport const useSurfaceContext = () => useContext(surfaceContext);\nexport const SurfaceContextProvider = ({\n  tone,\n  variant,\n  children\n}) => {\n  const contextValue = useMemo(() => ({\n    tone,\n    variant\n  }), [tone, variant]);\n  return React.createElement(surfaceContext.Provider, {\n    value: contextValue\n  }, children);\n};\n/* eslint-disable max-len,@typescript-eslint/comma-dangle */\n/**\n * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults\n */\nexport const SurfaceContextReset = props => React.createElement(surfaceContext.Provider, Object.assign({\n  value: undefined\n}, props));\n/**\n * Allows to integrate the component with surface context by creating component props default values from context using provided mapping.\n * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.\n * @param contextToProps maps current context into default component properties.\n * @param propsToInnerContext maps final component props into context that can be provided for component children.\n * @param defaultProps component default props when context is not provided\n **/\nexport const createUseSurfaceHook = (contextToProps, propsToInnerContext, defaultProps) => ({\n  useSurface: props => {\n    const surfaceContext = useSurfaceContext();\n    const componentProps = defaults({}, props, surfaceContext ? contextToProps(surfaceContext) : defaultProps);\n    const innerContextProps = propsToInnerContext(componentProps);\n    return {\n      componentProps,\n      innerContextProps\n    };\n  }\n});","map":{"version":3,"names":["defaults","React","createContext","useContext","useMemo","surfaceContext","undefined","useSurfaceContext","SurfaceContextProvider","tone","variant","children","contextValue","createElement","Provider","value","SurfaceContextReset","props","Object","assign","createUseSurfaceHook","contextToProps","propsToInnerContext","defaultProps","useSurface","componentProps","innerContextProps"],"sources":["/home/angela/Development/code/flask/blog_app_project/client/node_modules/@clds/design-system-foundations/src/surfaceContext.tsx"],"sourcesContent":["import { defaults } from 'lodash';\nimport React, {\n  createContext,\n  FC,\n  ReactNode,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport { SurfaceContext } from './types';\n\nconst surfaceContext = createContext<SurfaceContext | undefined>(undefined);\n\nexport const useSurfaceContext = () => useContext(surfaceContext);\n\nexport const SurfaceContextProvider: FC<\n  SurfaceContext & { children?: ReactNode | Array<ReactNode> }\n> = ({ tone, variant, children }) => {\n  const contextValue = useMemo<SurfaceContext>(\n    () => ({\n      tone,\n      variant,\n    }),\n    [tone, variant],\n  );\n  return (\n    <surfaceContext.Provider value={contextValue}>\n      {children}\n    </surfaceContext.Provider>\n  );\n};\n\n/* eslint-disable max-len,@typescript-eslint/comma-dangle */\n\n/**\n * Mainly for docs purposes - sometimes we need to show how components work without contextual defaults\n */\nexport const SurfaceContextReset = <Props,>(props: Props) => (\n  <surfaceContext.Provider value={undefined} {...props} />\n);\n\n/**\n * Allows to integrate the component with surface context by creating component props default values from context using provided mapping.\n * @returns hook that accepts directly passed component props and provides final component props and props that should be given to inner context.\n * @param contextToProps maps current context into default component properties.\n * @param propsToInnerContext maps final component props into context that can be provided for component children.\n * @param defaultProps component default props when context is not provided\n **/\nexport const createUseSurfaceHook = <P,>(\n  contextToProps: (context: SurfaceContext) => Required<P>,\n  propsToInnerContext: (props: Required<P>) => SurfaceContext,\n  defaultProps: Required<P>,\n) => ({\n  useSurface: (props: P) => {\n    const surfaceContext = useSurfaceContext();\n\n    const componentProps = defaults(\n      {},\n      props,\n      surfaceContext ? contextToProps(surfaceContext) : defaultProps,\n    );\n    const innerContextProps = propsToInnerContext(componentProps);\n\n    return { componentProps, innerContextProps };\n  },\n});\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;AACjC,OAAOC,KAAK,IACVC,aAAa,EAGbC,UAAU,EACVC,OAAO,QACF,OAAO;AAId,MAAMC,cAAc,GAAGH,aAAa,CAA6BI,SAAS,CAAC;AAE3E,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAMJ,UAAU,CAACE,cAAc,CAAC;AAEjE,OAAO,MAAMG,sBAAsB,GAE/BA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC;AAAQ,CAAE,KAAI;EAClC,MAAMC,YAAY,GAAGR,OAAO,CAC1B,OAAO;IACLK,IAAI;IACJC;GACD,CAAC,EACF,CAACD,IAAI,EAAEC,OAAO,CAAC,CAChB;EACD,OACET,KAAA,CAAAY,aAAA,CAACR,cAAc,CAACS,QAAQ;IAACC,KAAK,EAAEH;EAAY,GACzCD,QAAQ,CACe;AAE9B,CAAC;AAED;AAEA;;;AAGA,OAAO,MAAMK,mBAAmB,GAAYC,KAAY,IACtDhB,KAAA,CAAAY,aAAA,CAACR,cAAc,CAACS,QAAQ,EAAAI,MAAA,CAAAC,MAAA;EAACJ,KAAK,EAAET;AAAS,GAAMW,KAAK,EACrD;AAED;;;;;;;AAOA,OAAO,MAAMG,oBAAoB,GAAGA,CAClCC,cAAwD,EACxDC,mBAA2D,EAC3DC,YAAyB,MACrB;EACJC,UAAU,EAAGP,KAAQ,IAAI;IACvB,MAAMZ,cAAc,GAAGE,iBAAiB,EAAE;IAE1C,MAAMkB,cAAc,GAAGzB,QAAQ,CAC7B,EAAE,EACFiB,KAAK,EACLZ,cAAc,GAAGgB,cAAc,CAAChB,cAAc,CAAC,GAAGkB,YAAY,CAC/D;IACD,MAAMG,iBAAiB,GAAGJ,mBAAmB,CAACG,cAAc,CAAC;IAE7D,OAAO;MAAEA,cAAc;MAAEC;IAAiB,CAAE;EAC9C;CACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}